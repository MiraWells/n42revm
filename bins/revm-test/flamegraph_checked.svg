<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="602"><g><title>perf-exec (5 samples, 0.83%)</title><rect x="0.0000%" y="741" width="0.8306%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="725" width="0.8306%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="709" width="0.8306%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="693" width="0.8306%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="677" width="0.8306%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="661" width="0.8306%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="645" width="0.8306%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="629" width="0.8306%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="613" width="0.8306%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="597" width="0.8306%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="581" width="0.8306%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="565" width="0.8306%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="549" width="0.8306%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="533" width="0.8306%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="0.0000%" y="517" width="0.8306%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.17%)</title><rect x="0.8306%" y="661" width="0.1661%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="1.0806%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter::{{closure}} (1 samples, 0.17%)</title><rect x="0.8306%" y="645" width="0.1661%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="1.0806%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.33%)</title><rect x="0.8306%" y="709" width="0.3322%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="2"/><text x="1.0806%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.33%)</title><rect x="0.8306%" y="693" width="0.3322%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="2"/><text x="1.0806%" y="703.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.33%)</title><rect x="0.8306%" y="677" width="0.3322%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="2"/><text x="1.0806%" y="687.50"></text></g><g><title>revm::subroutine::SubRoutine::load_precompiles_default::{{closure}} (1 samples, 0.17%)</title><rect x="0.9967%" y="661" width="0.1661%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="1.2467%" y="671.50"></text></g><g><title>_int_malloc (1 samples, 0.17%)</title><rect x="1.1628%" y="709" width="0.1661%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="1.4128%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (2 samples, 0.33%)</title><rect x="1.3289%" y="709" width="0.3322%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="2"/><text x="1.5789%" y="719.50"></text></g><g><title>revm::instructions::arithmetic::div (1 samples, 0.17%)</title><rect x="1.6611%" y="709" width="0.1661%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="1.9111%" y="719.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (1 samples, 0.17%)</title><rect x="1.8272%" y="709" width="0.1661%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1"/><text x="2.0772%" y="719.50"></text></g><g><title>[[heap]] (8 samples, 1.33%)</title><rect x="0.8306%" y="725" width="1.3289%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="8"/><text x="1.0806%" y="735.50"></text></g><g><title>systrim.isra.0.constprop.0 (1 samples, 0.17%)</title><rect x="1.9934%" y="709" width="0.1661%" height="15" fill="rgb(225,111,53)" fg:x="12" fg:w="1"/><text x="2.2434%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="2.1595%" y="709" width="0.1661%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="1"/><text x="2.4095%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.17%)</title><rect x="2.3256%" y="709" width="0.1661%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="1"/><text x="2.5756%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.17%)</title><rect x="2.4917%" y="709" width="0.1661%" height="15" fill="rgb(232,36,49)" fg:x="15" fg:w="1"/><text x="2.7417%" y="719.50"></text></g><g><title>[[stack]] (4 samples, 0.66%)</title><rect x="2.1595%" y="725" width="0.6645%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="4"/><text x="2.4095%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.17%)</title><rect x="2.6578%" y="709" width="0.1661%" height="15" fill="rgb(229,88,8)" fg:x="16" fg:w="1"/><text x="2.9078%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.17%)</title><rect x="2.6578%" y="693" width="0.1661%" height="15" fill="rgb(213,181,19)" fg:x="16" fg:w="1"/><text x="2.9078%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.17%)</title><rect x="2.6578%" y="677" width="0.1661%" height="15" fill="rgb(254,191,54)" fg:x="16" fg:w="1"/><text x="2.9078%" y="687.50"></text></g><g><title>core::ptr::write (1 samples, 0.17%)</title><rect x="2.6578%" y="661" width="0.1661%" height="15" fill="rgb(241,83,37)" fg:x="16" fg:w="1"/><text x="2.9078%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="709" width="0.1661%" height="15" fill="rgb(233,36,39)" fg:x="17" fg:w="1"/><text x="3.0739%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="693" width="0.1661%" height="15" fill="rgb(226,3,54)" fg:x="17" fg:w="1"/><text x="3.0739%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="677" width="0.1661%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="1"/><text x="3.0739%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="661" width="0.1661%" height="15" fill="rgb(238,167,29)" fg:x="17" fg:w="1"/><text x="3.0739%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="645" width="0.1661%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="1"/><text x="3.0739%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="629" width="0.1661%" height="15" fill="rgb(231,60,39)" fg:x="17" fg:w="1"/><text x="3.0739%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="613" width="0.1661%" height="15" fill="rgb(208,69,12)" fg:x="17" fg:w="1"/><text x="3.0739%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="597" width="0.1661%" height="15" fill="rgb(235,93,37)" fg:x="17" fg:w="1"/><text x="3.0739%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.8239%" y="581" width="0.1661%" height="15" fill="rgb(213,116,39)" fg:x="17" fg:w="1"/><text x="3.0739%" y="591.50"></text></g><g><title>_int_free (1 samples, 0.17%)</title><rect x="2.9900%" y="709" width="0.1661%" height="15" fill="rgb(222,207,29)" fg:x="18" fg:w="1"/><text x="3.2400%" y="719.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.17%)</title><rect x="3.1561%" y="709" width="0.1661%" height="15" fill="rgb(206,96,30)" fg:x="19" fg:w="1"/><text x="3.4061%" y="719.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (1 samples, 0.17%)</title><rect x="3.1561%" y="693" width="0.1661%" height="15" fill="rgb(218,138,4)" fg:x="19" fg:w="1"/><text x="3.4061%" y="703.50"></text></g><g><title>bytes::bytes::promotable_even_drop::{{closure}} (1 samples, 0.17%)</title><rect x="3.1561%" y="677" width="0.1661%" height="15" fill="rgb(250,191,14)" fg:x="19" fg:w="1"/><text x="3.4061%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.17%)</title><rect x="3.3223%" y="709" width="0.1661%" height="15" fill="rgb(239,60,40)" fg:x="20" fg:w="1"/><text x="3.5723%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.17%)</title><rect x="3.4884%" y="709" width="0.1661%" height="15" fill="rgb(206,27,48)" fg:x="21" fg:w="1"/><text x="3.7384%" y="719.50"></text></g><g><title>primitive_types::U256::from_big_endian (1 samples, 0.17%)</title><rect x="3.6545%" y="709" width="0.1661%" height="15" fill="rgb(225,35,8)" fg:x="22" fg:w="1"/><text x="3.9045%" y="719.50"></text></g><g><title>revm::gas::calc::sha3_cost (1 samples, 0.17%)</title><rect x="3.8206%" y="709" width="0.1661%" height="15" fill="rgb(250,213,24)" fg:x="23" fg:w="1"/><text x="4.0706%" y="719.50"></text></g><g><title>revm::gas::calc::verylowcopy_cost (1 samples, 0.17%)</title><rect x="3.9867%" y="709" width="0.1661%" height="15" fill="rgb(247,123,22)" fg:x="24" fg:w="1"/><text x="4.2367%" y="719.50"></text></g><g><title>revm::subroutine::Filth::clean (1 samples, 0.17%)</title><rect x="4.1528%" y="709" width="0.1661%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="1"/><text x="4.4028%" y="719.50"></text></g><g><title>revm::subroutine::SubRoutine::new (2 samples, 0.33%)</title><rect x="4.3189%" y="709" width="0.3322%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="2"/><text x="4.5689%" y="719.50"></text></g><g><title>[unknown] (12 samples, 1.99%)</title><rect x="2.8239%" y="725" width="1.9934%" height="15" fill="rgb(251,118,11)" fg:x="17" fg:w="12"/><text x="3.0739%" y="735.50">[..</text></g><g><title>revm::subroutine::SubRoutine::sload (1 samples, 0.17%)</title><rect x="4.6512%" y="709" width="0.1661%" height="15" fill="rgb(217,147,25)" fg:x="28" fg:w="1"/><text x="4.9012%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(revm::instructions::Return,revm::models::TransactOut,u64,hashbrown::map::HashMap&lt;primitive_types::H160,revm::subroutine::Account&gt;,alloc::vec::Vec&lt;revm::models::Log&gt;)&gt; (2 samples, 0.33%)</title><rect x="4.8173%" y="453" width="0.3322%" height="15" fill="rgb(247,81,37)" fg:x="29" fg:w="2"/><text x="5.0673%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;primitive_types::H160,revm::subroutine::Account&gt;&gt; (2 samples, 0.33%)</title><rect x="4.8173%" y="437" width="0.3322%" height="15" fill="rgb(209,12,38)" fg:x="29" fg:w="2"/><text x="5.0673%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(primitive_types::H160,revm::subroutine::Account)&gt;&gt; (2 samples, 0.33%)</title><rect x="4.8173%" y="421" width="0.3322%" height="15" fill="rgb(227,1,9)" fg:x="29" fg:w="2"/><text x="5.0673%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.33%)</title><rect x="4.8173%" y="405" width="0.3322%" height="15" fill="rgb(248,47,43)" fg:x="29" fg:w="2"/><text x="5.0673%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (2 samples, 0.33%)</title><rect x="4.8173%" y="389" width="0.3322%" height="15" fill="rgb(221,10,30)" fg:x="29" fg:w="2"/><text x="5.0673%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (2 samples, 0.33%)</title><rect x="4.8173%" y="373" width="0.3322%" height="15" fill="rgb(210,229,1)" fg:x="29" fg:w="2"/><text x="5.0673%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::deallocate (2 samples, 0.33%)</title><rect x="4.8173%" y="357" width="0.3322%" height="15" fill="rgb(222,148,37)" fg:x="29" fg:w="2"/><text x="5.0673%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.33%)</title><rect x="4.8173%" y="341" width="0.3322%" height="15" fill="rgb(234,67,33)" fg:x="29" fg:w="2"/><text x="5.0673%" y="351.50"></text></g><g><title>_int_free (2 samples, 0.33%)</title><rect x="4.8173%" y="325" width="0.3322%" height="15" fill="rgb(247,98,35)" fg:x="29" fg:w="2"/><text x="5.0673%" y="335.50"></text></g><g><title>malloc_consolidate (2 samples, 0.33%)</title><rect x="4.8173%" y="309" width="0.3322%" height="15" fill="rgb(247,138,52)" fg:x="29" fg:w="2"/><text x="5.0673%" y="319.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Sub&lt;T&gt;&gt;::sub (1 samples, 0.17%)</title><rect x="5.1495%" y="421" width="0.1661%" height="15" fill="rgb(213,79,30)" fg:x="31" fg:w="1"/><text x="5.3995%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="5.6478%" y="389" width="0.1661%" height="15" fill="rgb(246,177,23)" fg:x="34" fg:w="1"/><text x="5.8978%" y="399.50"></text></g><g><title>&lt;revm::interpreter::bytecode::Bytecode as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="5.6478%" y="373" width="0.1661%" height="15" fill="rgb(230,62,27)" fg:x="34" fg:w="1"/><text x="5.8978%" y="383.50"></text></g><g><title>&lt;revm::subroutine::Account as core::convert::From&lt;revm::models::AccountInfo&gt;&gt;::from (1 samples, 0.17%)</title><rect x="5.8140%" y="341" width="0.1661%" height="15" fill="rgb(216,154,8)" fg:x="35" fg:w="1"/><text x="6.0640%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V&gt;::new (1 samples, 0.17%)</title><rect x="5.8140%" y="325" width="0.1661%" height="15" fill="rgb(244,35,45)" fg:x="35" fg:w="1"/><text x="6.0640%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (1 samples, 0.17%)</title><rect x="5.8140%" y="309" width="0.1661%" height="15" fill="rgb(251,115,12)" fg:x="35" fg:w="1"/><text x="6.0640%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::with_hasher_in (1 samples, 0.17%)</title><rect x="5.8140%" y="293" width="0.1661%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="1"/><text x="6.0640%" y="303.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.33%)</title><rect x="5.8140%" y="357" width="0.3322%" height="15" fill="rgb(233,84,52)" fg:x="35" fg:w="2"/><text x="6.0640%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="5.9801%" y="341" width="0.1661%" height="15" fill="rgb(207,117,47)" fg:x="36" fg:w="1"/><text x="6.2301%" y="351.50"></text></g><g><title>&lt;revm::db::in_memory_db::BenchmarkDB as revm::db::Database&gt;::basic (1 samples, 0.17%)</title><rect x="6.1462%" y="357" width="0.1661%" height="15" fill="rgb(249,43,39)" fg:x="37" fg:w="1"/><text x="6.3962%" y="367.50"></text></g><g><title>&lt;revm::interpreter::bytecode::Bytecode as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="6.1462%" y="341" width="0.1661%" height="15" fill="rgb(209,38,44)" fg:x="37" fg:w="1"/><text x="6.3962%" y="351.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="6.1462%" y="325" width="0.1661%" height="15" fill="rgb(236,212,23)" fg:x="37" fg:w="1"/><text x="6.3962%" y="335.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.17%)</title><rect x="6.1462%" y="309" width="0.1661%" height="15" fill="rgb(242,79,21)" fg:x="37" fg:w="1"/><text x="6.3962%" y="319.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (1 samples, 0.17%)</title><rect x="6.1462%" y="293" width="0.1661%" height="15" fill="rgb(211,96,35)" fg:x="37" fg:w="1"/><text x="6.3962%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.17%)</title><rect x="6.1462%" y="277" width="0.1661%" height="15" fill="rgb(253,215,40)" fg:x="37" fg:w="1"/><text x="6.3962%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.17%)</title><rect x="6.1462%" y="261" width="0.1661%" height="15" fill="rgb(211,81,21)" fg:x="37" fg:w="1"/><text x="6.3962%" y="271.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::code (5 samples, 0.83%)</title><rect x="5.6478%" y="405" width="0.8306%" height="15" fill="rgb(208,190,38)" fg:x="34" fg:w="5"/><text x="5.8978%" y="415.50"></text></g><g><title>revm::subroutine::SubRoutine::load_code (4 samples, 0.66%)</title><rect x="5.8140%" y="389" width="0.6645%" height="15" fill="rgb(235,213,38)" fg:x="35" fg:w="4"/><text x="6.0640%" y="399.50"></text></g><g><title>revm::subroutine::SubRoutine::load_account (4 samples, 0.66%)</title><rect x="5.8140%" y="373" width="0.6645%" height="15" fill="rgb(237,122,38)" fg:x="35" fg:w="4"/><text x="6.0640%" y="383.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (1 samples, 0.17%)</title><rect x="6.3123%" y="357" width="0.1661%" height="15" fill="rgb(244,218,35)" fg:x="38" fg:w="1"/><text x="6.5623%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (1 samples, 0.17%)</title><rect x="6.3123%" y="341" width="0.1661%" height="15" fill="rgb(240,68,47)" fg:x="38" fg:w="1"/><text x="6.5623%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="6.3123%" y="325" width="0.1661%" height="15" fill="rgb(210,16,53)" fg:x="38" fg:w="1"/><text x="6.5623%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.17%)</title><rect x="6.4784%" y="357" width="0.1661%" height="15" fill="rgb(235,124,12)" fg:x="39" fg:w="1"/><text x="6.7284%" y="367.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="6.4784%" y="341" width="0.1661%" height="15" fill="rgb(224,169,11)" fg:x="39" fg:w="1"/><text x="6.7284%" y="351.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.17%)</title><rect x="6.4784%" y="325" width="0.1661%" height="15" fill="rgb(250,166,2)" fg:x="39" fg:w="1"/><text x="6.7284%" y="335.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (1 samples, 0.17%)</title><rect x="6.4784%" y="309" width="0.1661%" height="15" fill="rgb(242,216,29)" fg:x="39" fg:w="1"/><text x="6.7284%" y="319.50"></text></g><g><title>bytes::bytes::shared_drop::{{closure}} (1 samples, 0.17%)</title><rect x="6.4784%" y="293" width="0.1661%" height="15" fill="rgb(230,116,27)" fg:x="39" fg:w="1"/><text x="6.7284%" y="303.50"></text></g><g><title>bytes::bytes::release_shared (1 samples, 0.17%)</title><rect x="6.4784%" y="277" width="0.1661%" height="15" fill="rgb(228,99,48)" fg:x="39" fg:w="1"/><text x="6.7284%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.17%)</title><rect x="6.4784%" y="261" width="0.1661%" height="15" fill="rgb(253,11,6)" fg:x="39" fg:w="1"/><text x="6.7284%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.17%)</title><rect x="6.4784%" y="245" width="0.1661%" height="15" fill="rgb(247,143,39)" fg:x="39" fg:w="1"/><text x="6.7284%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::Interpreter&gt; (2 samples, 0.33%)</title><rect x="6.4784%" y="405" width="0.3322%" height="15" fill="rgb(236,97,10)" fg:x="39" fg:w="2"/><text x="6.7284%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::contract::Contract&gt; (2 samples, 0.33%)</title><rect x="6.4784%" y="389" width="0.3322%" height="15" fill="rgb(233,208,19)" fg:x="39" fg:w="2"/><text x="6.7284%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::bytecode::BytecodeLocked&gt; (2 samples, 0.33%)</title><rect x="6.4784%" y="373" width="0.3322%" height="15" fill="rgb(216,164,2)" fg:x="39" fg:w="2"/><text x="6.7284%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::contract::ValidJumpAddress&gt; (1 samples, 0.17%)</title><rect x="6.6445%" y="357" width="0.1661%" height="15" fill="rgb(220,129,5)" fg:x="40" fg:w="1"/><text x="6.8945%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;alloc::vec::Vec&lt;revm::interpreter::contract::AnalysisData&gt;&gt;&gt; (1 samples, 0.17%)</title><rect x="6.6445%" y="341" width="0.1661%" height="15" fill="rgb(242,17,10)" fg:x="40" fg:w="1"/><text x="6.8945%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="6.6445%" y="325" width="0.1661%" height="15" fill="rgb(242,107,0)" fg:x="40" fg:w="1"/><text x="6.8945%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::interpreter::contract::AnalysisData&gt;&gt; (1 samples, 0.17%)</title><rect x="6.6445%" y="309" width="0.1661%" height="15" fill="rgb(251,28,31)" fg:x="40" fg:w="1"/><text x="6.8945%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm::interpreter::contract::AnalysisData&gt;&gt; (1 samples, 0.17%)</title><rect x="6.6445%" y="293" width="0.1661%" height="15" fill="rgb(233,223,10)" fg:x="40" fg:w="1"/><text x="6.8945%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="6.6445%" y="277" width="0.1661%" height="15" fill="rgb(215,21,27)" fg:x="40" fg:w="1"/><text x="6.8945%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.17%)</title><rect x="6.6445%" y="261" width="0.1661%" height="15" fill="rgb(232,23,21)" fg:x="40" fg:w="1"/><text x="6.8945%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.17%)</title><rect x="6.6445%" y="245" width="0.1661%" height="15" fill="rgb(244,5,23)" fg:x="40" fg:w="1"/><text x="6.8945%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.17%)</title><rect x="6.6445%" y="229" width="0.1661%" height="15" fill="rgb(226,81,46)" fg:x="40" fg:w="1"/><text x="6.8945%" y="239.50"></text></g><g><title>revm::interpreter::memory::Memory::new (1 samples, 0.17%)</title><rect x="6.8106%" y="389" width="0.1661%" height="15" fill="rgb(247,70,30)" fg:x="41" fg:w="1"/><text x="7.0606%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.17%)</title><rect x="6.8106%" y="373" width="0.1661%" height="15" fill="rgb(212,68,19)" fg:x="41" fg:w="1"/><text x="7.0606%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.17%)</title><rect x="6.8106%" y="357" width="0.1661%" height="15" fill="rgb(240,187,13)" fg:x="41" fg:w="1"/><text x="7.0606%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.17%)</title><rect x="6.8106%" y="341" width="0.1661%" height="15" fill="rgb(223,113,26)" fg:x="41" fg:w="1"/><text x="7.0606%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.17%)</title><rect x="6.8106%" y="325" width="0.1661%" height="15" fill="rgb(206,192,2)" fg:x="41" fg:w="1"/><text x="7.0606%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.17%)</title><rect x="6.8106%" y="309" width="0.1661%" height="15" fill="rgb(241,108,4)" fg:x="41" fg:w="1"/><text x="7.0606%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.17%)</title><rect x="6.8106%" y="293" width="0.1661%" height="15" fill="rgb(247,173,49)" fg:x="41" fg:w="1"/><text x="7.0606%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.17%)</title><rect x="6.8106%" y="277" width="0.1661%" height="15" fill="rgb(224,114,35)" fg:x="41" fg:w="1"/><text x="7.0606%" y="287.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="6.8106%" y="261" width="0.1661%" height="15" fill="rgb(245,159,27)" fg:x="41" fg:w="1"/><text x="7.0606%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.17%)</title><rect x="6.8106%" y="245" width="0.1661%" height="15" fill="rgb(245,172,44)" fg:x="41" fg:w="1"/><text x="7.0606%" y="255.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.17%)</title><rect x="6.8106%" y="229" width="0.1661%" height="15" fill="rgb(236,23,11)" fg:x="41" fg:w="1"/><text x="7.0606%" y="239.50"></text></g><g><title>revm::interpreter::Interpreter::new (2 samples, 0.33%)</title><rect x="6.8106%" y="405" width="0.3322%" height="15" fill="rgb(205,117,38)" fg:x="41" fg:w="2"/><text x="7.0606%" y="415.50"></text></g><g><title>revm::interpreter::stack::Stack::new (1 samples, 0.17%)</title><rect x="6.9767%" y="389" width="0.1661%" height="15" fill="rgb(237,72,25)" fg:x="42" fg:w="1"/><text x="7.2267%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.17%)</title><rect x="6.9767%" y="373" width="0.1661%" height="15" fill="rgb(244,70,9)" fg:x="42" fg:w="1"/><text x="7.2267%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.17%)</title><rect x="6.9767%" y="357" width="0.1661%" height="15" fill="rgb(217,125,39)" fg:x="42" fg:w="1"/><text x="7.2267%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.17%)</title><rect x="6.9767%" y="341" width="0.1661%" height="15" fill="rgb(235,36,10)" fg:x="42" fg:w="1"/><text x="7.2267%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.17%)</title><rect x="6.9767%" y="325" width="0.1661%" height="15" fill="rgb(251,123,47)" fg:x="42" fg:w="1"/><text x="7.2267%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.17%)</title><rect x="6.9767%" y="309" width="0.1661%" height="15" fill="rgb(221,13,13)" fg:x="42" fg:w="1"/><text x="7.2267%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.17%)</title><rect x="6.9767%" y="293" width="0.1661%" height="15" fill="rgb(238,131,9)" fg:x="42" fg:w="1"/><text x="7.2267%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.17%)</title><rect x="6.9767%" y="277" width="0.1661%" height="15" fill="rgb(211,50,8)" fg:x="42" fg:w="1"/><text x="7.2267%" y="287.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="6.9767%" y="261" width="0.1661%" height="15" fill="rgb(245,182,24)" fg:x="42" fg:w="1"/><text x="7.2267%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.17%)</title><rect x="6.9767%" y="245" width="0.1661%" height="15" fill="rgb(242,14,37)" fg:x="42" fg:w="1"/><text x="7.2267%" y="255.50"></text></g><g><title>revm::interpreter::Interpreter::return_value (2 samples, 0.33%)</title><rect x="7.1429%" y="405" width="0.3322%" height="15" fill="rgb(246,228,12)" fg:x="43" fg:w="2"/><text x="7.3929%" y="415.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (2 samples, 0.33%)</title><rect x="7.1429%" y="389" width="0.3322%" height="15" fill="rgb(213,55,15)" fg:x="43" fg:w="2"/><text x="7.3929%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.33%)</title><rect x="7.1429%" y="373" width="0.3322%" height="15" fill="rgb(209,9,3)" fg:x="43" fg:w="2"/><text x="7.3929%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.33%)</title><rect x="7.1429%" y="357" width="0.3322%" height="15" fill="rgb(230,59,30)" fg:x="43" fg:w="2"/><text x="7.3929%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.33%)</title><rect x="7.1429%" y="341" width="0.3322%" height="15" fill="rgb(209,121,21)" fg:x="43" fg:w="2"/><text x="7.3929%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.33%)</title><rect x="7.1429%" y="325" width="0.3322%" height="15" fill="rgb(220,109,13)" fg:x="43" fg:w="2"/><text x="7.3929%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.33%)</title><rect x="7.1429%" y="309" width="0.3322%" height="15" fill="rgb(232,18,1)" fg:x="43" fg:w="2"/><text x="7.3929%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.33%)</title><rect x="7.1429%" y="293" width="0.3322%" height="15" fill="rgb(215,41,42)" fg:x="43" fg:w="2"/><text x="7.3929%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.33%)</title><rect x="7.1429%" y="277" width="0.3322%" height="15" fill="rgb(224,123,36)" fg:x="43" fg:w="2"/><text x="7.3929%" y="287.50"></text></g><g><title>primitive_types::U256::overflowing_mul (2 samples, 0.33%)</title><rect x="9.6346%" y="373" width="0.3322%" height="15" fill="rgb(240,125,3)" fg:x="58" fg:w="2"/><text x="9.8846%" y="383.50"></text></g><g><title>revm::instructions::control::jump (1 samples, 0.17%)</title><rect x="9.9668%" y="373" width="0.1661%" height="15" fill="rgb(205,98,50)" fg:x="60" fg:w="1"/><text x="10.2168%" y="383.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (1 samples, 0.17%)</title><rect x="9.9668%" y="357" width="0.1661%" height="15" fill="rgb(205,185,37)" fg:x="60" fg:w="1"/><text x="10.2168%" y="367.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (1 samples, 0.17%)</title><rect x="9.9668%" y="341" width="0.1661%" height="15" fill="rgb(238,207,15)" fg:x="60" fg:w="1"/><text x="10.2168%" y="351.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump_dest (1 samples, 0.17%)</title><rect x="9.9668%" y="325" width="0.1661%" height="15" fill="rgb(213,199,42)" fg:x="60" fg:w="1"/><text x="10.2168%" y="335.50"></text></g><g><title>revm::instructions::control::ret (1 samples, 0.17%)</title><rect x="10.1329%" y="373" width="0.1661%" height="15" fill="rgb(235,201,11)" fg:x="61" fg:w="1"/><text x="10.3829%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.17%)</title><rect x="10.4651%" y="197" width="0.1661%" height="15" fill="rgb(207,46,11)" fg:x="63" fg:w="1"/><text x="10.7151%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.17%)</title><rect x="10.6312%" y="197" width="0.1661%" height="15" fill="rgb(241,35,35)" fg:x="64" fg:w="1"/><text x="10.8812%" y="207.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.17%)</title><rect x="10.6312%" y="181" width="0.1661%" height="15" fill="rgb(243,32,47)" fg:x="64" fg:w="1"/><text x="10.8812%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.17%)</title><rect x="10.6312%" y="165" width="0.1661%" height="15" fill="rgb(247,202,23)" fg:x="64" fg:w="1"/><text x="10.8812%" y="175.50"></text></g><g><title>&lt;primitive_types::U256 as core::hash::Hash&gt;::hash (1 samples, 0.17%)</title><rect x="10.6312%" y="149" width="0.1661%" height="15" fill="rgb(219,102,11)" fg:x="64" fg:w="1"/><text x="10.8812%" y="159.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.17%)</title><rect x="10.6312%" y="133" width="0.1661%" height="15" fill="rgb(243,110,44)" fg:x="64" fg:w="1"/><text x="10.8812%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.17%)</title><rect x="10.6312%" y="117" width="0.1661%" height="15" fill="rgb(222,74,54)" fg:x="64" fg:w="1"/><text x="10.8812%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (1 samples, 0.17%)</title><rect x="10.6312%" y="101" width="0.1661%" height="15" fill="rgb(216,99,12)" fg:x="64" fg:w="1"/><text x="10.8812%" y="111.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="10.6312%" y="85" width="0.1661%" height="15" fill="rgb(226,22,26)" fg:x="64" fg:w="1"/><text x="10.8812%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.17%)</title><rect x="10.6312%" y="69" width="0.1661%" height="15" fill="rgb(217,163,10)" fg:x="64" fg:w="1"/><text x="10.8812%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.17%)</title><rect x="10.6312%" y="53" width="0.1661%" height="15" fill="rgb(213,25,53)" fg:x="64" fg:w="1"/><text x="10.8812%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.33%)</title><rect x="10.7973%" y="181" width="0.3322%" height="15" fill="rgb(252,105,26)" fg:x="65" fg:w="2"/><text x="11.0473%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.33%)</title><rect x="10.7973%" y="165" width="0.3322%" height="15" fill="rgb(220,39,43)" fg:x="65" fg:w="2"/><text x="11.0473%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.33%)</title><rect x="10.7973%" y="149" width="0.3322%" height="15" fill="rgb(229,68,48)" fg:x="65" fg:w="2"/><text x="11.0473%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.33%)</title><rect x="10.7973%" y="133" width="0.3322%" height="15" fill="rgb(252,8,32)" fg:x="65" fg:w="2"/><text x="11.0473%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (3 samples, 0.50%)</title><rect x="10.7973%" y="197" width="0.4983%" height="15" fill="rgb(223,20,43)" fg:x="65" fg:w="3"/><text x="11.0473%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (1 samples, 0.17%)</title><rect x="11.1296%" y="181" width="0.1661%" height="15" fill="rgb(229,81,49)" fg:x="67" fg:w="1"/><text x="11.3796%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.17%)</title><rect x="11.1296%" y="165" width="0.1661%" height="15" fill="rgb(236,28,36)" fg:x="67" fg:w="1"/><text x="11.3796%" y="175.50"></text></g><g><title>hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert (9 samples, 1.50%)</title><rect x="10.2990%" y="325" width="1.4950%" height="15" fill="rgb(249,185,26)" fg:x="62" fg:w="9"/><text x="10.5490%" y="335.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (9 samples, 1.50%)</title><rect x="10.2990%" y="309" width="1.4950%" height="15" fill="rgb(249,174,33)" fg:x="62" fg:w="9"/><text x="10.5490%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (9 samples, 1.50%)</title><rect x="10.2990%" y="293" width="1.4950%" height="15" fill="rgb(233,201,37)" fg:x="62" fg:w="9"/><text x="10.5490%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 1.50%)</title><rect x="10.2990%" y="277" width="1.4950%" height="15" fill="rgb(221,78,26)" fg:x="62" fg:w="9"/><text x="10.5490%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (8 samples, 1.33%)</title><rect x="10.4651%" y="261" width="1.3289%" height="15" fill="rgb(250,127,30)" fg:x="63" fg:w="8"/><text x="10.7151%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 1.33%)</title><rect x="10.4651%" y="245" width="1.3289%" height="15" fill="rgb(230,49,44)" fg:x="63" fg:w="8"/><text x="10.7151%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (8 samples, 1.33%)</title><rect x="10.4651%" y="229" width="1.3289%" height="15" fill="rgb(229,67,23)" fg:x="63" fg:w="8"/><text x="10.7151%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (8 samples, 1.33%)</title><rect x="10.4651%" y="213" width="1.3289%" height="15" fill="rgb(249,83,47)" fg:x="63" fg:w="8"/><text x="10.7151%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (3 samples, 0.50%)</title><rect x="11.2957%" y="197" width="0.4983%" height="15" fill="rgb(215,43,3)" fg:x="68" fg:w="3"/><text x="11.5457%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (3 samples, 0.50%)</title><rect x="11.2957%" y="181" width="0.4983%" height="15" fill="rgb(238,154,13)" fg:x="68" fg:w="3"/><text x="11.5457%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (3 samples, 0.50%)</title><rect x="11.2957%" y="165" width="0.4983%" height="15" fill="rgb(219,56,2)" fg:x="68" fg:w="3"/><text x="11.5457%" y="175.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.50%)</title><rect x="11.2957%" y="149" width="0.4983%" height="15" fill="rgb(233,0,4)" fg:x="68" fg:w="3"/><text x="11.5457%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (3 samples, 0.50%)</title><rect x="11.2957%" y="133" width="0.4983%" height="15" fill="rgb(235,30,7)" fg:x="68" fg:w="3"/><text x="11.5457%" y="143.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.50%)</title><rect x="11.2957%" y="117" width="0.4983%" height="15" fill="rgb(250,79,13)" fg:x="68" fg:w="3"/><text x="11.5457%" y="127.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.50%)</title><rect x="11.2957%" y="101" width="0.4983%" height="15" fill="rgb(211,146,34)" fg:x="68" fg:w="3"/><text x="11.5457%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (1 samples, 0.17%)</title><rect x="11.7940%" y="325" width="0.1661%" height="15" fill="rgb(228,22,38)" fg:x="71" fg:w="1"/><text x="12.0440%" y="335.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.17%)</title><rect x="11.7940%" y="309" width="0.1661%" height="15" fill="rgb(235,168,5)" fg:x="71" fg:w="1"/><text x="12.0440%" y="319.50"></text></g><g><title>&lt;primitive_types::U256 as core::hash::Hash&gt;::hash (1 samples, 0.17%)</title><rect x="11.7940%" y="293" width="0.1661%" height="15" fill="rgb(221,155,16)" fg:x="71" fg:w="1"/><text x="12.0440%" y="303.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.17%)</title><rect x="11.7940%" y="277" width="0.1661%" height="15" fill="rgb(215,215,53)" fg:x="71" fg:w="1"/><text x="12.0440%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.17%)</title><rect x="11.7940%" y="261" width="0.1661%" height="15" fill="rgb(223,4,10)" fg:x="71" fg:w="1"/><text x="12.0440%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (1 samples, 0.17%)</title><rect x="11.7940%" y="245" width="0.1661%" height="15" fill="rgb(234,103,6)" fg:x="71" fg:w="1"/><text x="12.0440%" y="255.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="11.7940%" y="229" width="0.1661%" height="15" fill="rgb(227,97,0)" fg:x="71" fg:w="1"/><text x="12.0440%" y="239.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.17%)</title><rect x="11.7940%" y="213" width="0.1661%" height="15" fill="rgb(234,150,53)" fg:x="71" fg:w="1"/><text x="12.0440%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.17%)</title><rect x="11.9601%" y="229" width="0.1661%" height="15" fill="rgb(228,201,54)" fg:x="72" fg:w="1"/><text x="12.2101%" y="239.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (1 samples, 0.17%)</title><rect x="11.9601%" y="213" width="0.1661%" height="15" fill="rgb(222,22,37)" fg:x="72" fg:w="1"/><text x="12.2101%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="11.9601%" y="197" width="0.1661%" height="15" fill="rgb(237,53,32)" fg:x="72" fg:w="1"/><text x="12.2101%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.17%)</title><rect x="11.9601%" y="181" width="0.1661%" height="15" fill="rgb(233,25,53)" fg:x="72" fg:w="1"/><text x="12.2101%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.17%)</title><rect x="11.9601%" y="165" width="0.1661%" height="15" fill="rgb(210,40,34)" fg:x="72" fg:w="1"/><text x="12.2101%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.33%)</title><rect x="11.9601%" y="245" width="0.3322%" height="15" fill="rgb(241,220,44)" fg:x="72" fg:w="2"/><text x="12.2101%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.17%)</title><rect x="12.1262%" y="229" width="0.1661%" height="15" fill="rgb(235,28,35)" fg:x="73" fg:w="1"/><text x="12.3762%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.17%)</title><rect x="12.1262%" y="213" width="0.1661%" height="15" fill="rgb(210,56,17)" fg:x="73" fg:w="1"/><text x="12.3762%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.17%)</title><rect x="12.1262%" y="197" width="0.1661%" height="15" fill="rgb(224,130,29)" fg:x="73" fg:w="1"/><text x="12.3762%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.17%)</title><rect x="12.1262%" y="181" width="0.1661%" height="15" fill="rgb(235,212,8)" fg:x="73" fg:w="1"/><text x="12.3762%" y="191.50"></text></g><g><title>revm::instructions::host::sload (13 samples, 2.16%)</title><rect x="10.2990%" y="373" width="2.1595%" height="15" fill="rgb(223,33,50)" fg:x="62" fg:w="13"/><text x="10.5490%" y="383.50">r..</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (13 samples, 2.16%)</title><rect x="10.2990%" y="357" width="2.1595%" height="15" fill="rgb(219,149,13)" fg:x="62" fg:w="13"/><text x="10.5490%" y="367.50">&lt;..</text></g><g><title>revm::subroutine::SubRoutine::sload (13 samples, 2.16%)</title><rect x="10.2990%" y="341" width="2.1595%" height="15" fill="rgb(250,156,29)" fg:x="62" fg:w="13"/><text x="10.5490%" y="351.50">r..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.50%)</title><rect x="11.9601%" y="325" width="0.4983%" height="15" fill="rgb(216,193,19)" fg:x="72" fg:w="3"/><text x="12.2101%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.50%)</title><rect x="11.9601%" y="309" width="0.4983%" height="15" fill="rgb(216,135,14)" fg:x="72" fg:w="3"/><text x="12.2101%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.50%)</title><rect x="11.9601%" y="293" width="0.4983%" height="15" fill="rgb(241,47,5)" fg:x="72" fg:w="3"/><text x="12.2101%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.50%)</title><rect x="11.9601%" y="277" width="0.4983%" height="15" fill="rgb(233,42,35)" fg:x="72" fg:w="3"/><text x="12.2101%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.50%)</title><rect x="11.9601%" y="261" width="0.4983%" height="15" fill="rgb(231,13,6)" fg:x="72" fg:w="3"/><text x="12.2101%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.17%)</title><rect x="12.2924%" y="245" width="0.1661%" height="15" fill="rgb(207,181,40)" fg:x="74" fg:w="1"/><text x="12.5424%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.17%)</title><rect x="12.2924%" y="229" width="0.1661%" height="15" fill="rgb(254,173,49)" fg:x="74" fg:w="1"/><text x="12.5424%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.17%)</title><rect x="12.6246%" y="325" width="0.1661%" height="15" fill="rgb(221,1,38)" fg:x="76" fg:w="1"/><text x="12.8746%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.17%)</title><rect x="12.6246%" y="309" width="0.1661%" height="15" fill="rgb(206,124,46)" fg:x="76" fg:w="1"/><text x="12.8746%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.17%)</title><rect x="12.6246%" y="293" width="0.1661%" height="15" fill="rgb(249,21,11)" fg:x="76" fg:w="1"/><text x="12.8746%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.17%)</title><rect x="12.6246%" y="277" width="0.1661%" height="15" fill="rgb(222,201,40)" fg:x="76" fg:w="1"/><text x="12.8746%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.17%)</title><rect x="12.6246%" y="261" width="0.1661%" height="15" fill="rgb(235,61,29)" fg:x="76" fg:w="1"/><text x="12.8746%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.17%)</title><rect x="12.6246%" y="245" width="0.1661%" height="15" fill="rgb(219,207,3)" fg:x="76" fg:w="1"/><text x="12.8746%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.17%)</title><rect x="12.6246%" y="229" width="0.1661%" height="15" fill="rgb(222,56,46)" fg:x="76" fg:w="1"/><text x="12.8746%" y="239.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (1 samples, 0.17%)</title><rect x="12.6246%" y="213" width="0.1661%" height="15" fill="rgb(239,76,54)" fg:x="76" fg:w="1"/><text x="12.8746%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="12.6246%" y="197" width="0.1661%" height="15" fill="rgb(231,124,27)" fg:x="76" fg:w="1"/><text x="12.8746%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.17%)</title><rect x="12.6246%" y="181" width="0.1661%" height="15" fill="rgb(249,195,6)" fg:x="76" fg:w="1"/><text x="12.8746%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.17%)</title><rect x="12.6246%" y="165" width="0.1661%" height="15" fill="rgb(237,174,47)" fg:x="76" fg:w="1"/><text x="12.8746%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.17%)</title><rect x="12.7907%" y="245" width="0.1661%" height="15" fill="rgb(206,201,31)" fg:x="77" fg:w="1"/><text x="13.0407%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.17%)</title><rect x="12.7907%" y="229" width="0.1661%" height="15" fill="rgb(231,57,52)" fg:x="77" fg:w="1"/><text x="13.0407%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.17%)</title><rect x="12.7907%" y="213" width="0.1661%" height="15" fill="rgb(248,177,22)" fg:x="77" fg:w="1"/><text x="13.0407%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.17%)</title><rect x="12.7907%" y="197" width="0.1661%" height="15" fill="rgb(215,211,37)" fg:x="77" fg:w="1"/><text x="13.0407%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.17%)</title><rect x="12.7907%" y="181" width="0.1661%" height="15" fill="rgb(241,128,51)" fg:x="77" fg:w="1"/><text x="13.0407%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.17%)</title><rect x="12.7907%" y="165" width="0.1661%" height="15" fill="rgb(227,165,31)" fg:x="77" fg:w="1"/><text x="13.0407%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.17%)</title><rect x="12.7907%" y="149" width="0.1661%" height="15" fill="rgb(228,167,24)" fg:x="77" fg:w="1"/><text x="13.0407%" y="159.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.17%)</title><rect x="12.7907%" y="133" width="0.1661%" height="15" fill="rgb(228,143,12)" fg:x="77" fg:w="1"/><text x="13.0407%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (1 samples, 0.17%)</title><rect x="12.7907%" y="117" width="0.1661%" height="15" fill="rgb(249,149,8)" fg:x="77" fg:w="1"/><text x="13.0407%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.17%)</title><rect x="12.7907%" y="101" width="0.1661%" height="15" fill="rgb(243,35,44)" fg:x="77" fg:w="1"/><text x="13.0407%" y="111.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="12.7907%" y="85" width="0.1661%" height="15" fill="rgb(246,89,9)" fg:x="77" fg:w="1"/><text x="13.0407%" y="95.50"></text></g><g><title>hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert (2 samples, 0.33%)</title><rect x="12.7907%" y="309" width="0.3322%" height="15" fill="rgb(233,213,13)" fg:x="77" fg:w="2"/><text x="13.0407%" y="319.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (2 samples, 0.33%)</title><rect x="12.7907%" y="293" width="0.3322%" height="15" fill="rgb(233,141,41)" fg:x="77" fg:w="2"/><text x="13.0407%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (2 samples, 0.33%)</title><rect x="12.7907%" y="277" width="0.3322%" height="15" fill="rgb(239,167,4)" fg:x="77" fg:w="2"/><text x="13.0407%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.33%)</title><rect x="12.7907%" y="261" width="0.3322%" height="15" fill="rgb(209,217,16)" fg:x="77" fg:w="2"/><text x="13.0407%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.17%)</title><rect x="12.9568%" y="245" width="0.1661%" height="15" fill="rgb(219,88,35)" fg:x="78" fg:w="1"/><text x="13.2068%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.17%)</title><rect x="12.9568%" y="229" width="0.1661%" height="15" fill="rgb(220,193,23)" fg:x="78" fg:w="1"/><text x="13.2068%" y="239.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.33%)</title><rect x="13.1229%" y="293" width="0.3322%" height="15" fill="rgb(230,90,52)" fg:x="79" fg:w="2"/><text x="13.3729%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (2 samples, 0.33%)</title><rect x="13.1229%" y="277" width="0.3322%" height="15" fill="rgb(252,106,19)" fg:x="79" fg:w="2"/><text x="13.3729%" y="287.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.33%)</title><rect x="13.1229%" y="261" width="0.3322%" height="15" fill="rgb(206,74,20)" fg:x="79" fg:w="2"/><text x="13.3729%" y="271.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="13.2890%" y="245" width="0.1661%" height="15" fill="rgb(230,138,44)" fg:x="80" fg:w="1"/><text x="13.5390%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.17%)</title><rect x="13.4551%" y="261" width="0.1661%" height="15" fill="rgb(235,182,43)" fg:x="81" fg:w="1"/><text x="13.7051%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.17%)</title><rect x="13.4551%" y="245" width="0.1661%" height="15" fill="rgb(242,16,51)" fg:x="81" fg:w="1"/><text x="13.7051%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.33%)</title><rect x="13.6213%" y="261" width="0.3322%" height="15" fill="rgb(248,9,4)" fg:x="82" fg:w="2"/><text x="13.8713%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.33%)</title><rect x="13.6213%" y="245" width="0.3322%" height="15" fill="rgb(210,31,22)" fg:x="82" fg:w="2"/><text x="13.8713%" y="255.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (2 samples, 0.33%)</title><rect x="13.6213%" y="229" width="0.3322%" height="15" fill="rgb(239,54,39)" fg:x="82" fg:w="2"/><text x="13.8713%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.33%)</title><rect x="13.6213%" y="213" width="0.3322%" height="15" fill="rgb(230,99,41)" fg:x="82" fg:w="2"/><text x="13.8713%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.33%)</title><rect x="13.6213%" y="197" width="0.3322%" height="15" fill="rgb(253,106,12)" fg:x="82" fg:w="2"/><text x="13.8713%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.33%)</title><rect x="13.6213%" y="181" width="0.3322%" height="15" fill="rgb(213,46,41)" fg:x="82" fg:w="2"/><text x="13.8713%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (6 samples, 1.00%)</title><rect x="13.1229%" y="309" width="0.9967%" height="15" fill="rgb(215,133,35)" fg:x="79" fg:w="6"/><text x="13.3729%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.66%)</title><rect x="13.4551%" y="293" width="0.6645%" height="15" fill="rgb(213,28,5)" fg:x="81" fg:w="4"/><text x="13.7051%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (4 samples, 0.66%)</title><rect x="13.4551%" y="277" width="0.6645%" height="15" fill="rgb(215,77,49)" fg:x="81" fg:w="4"/><text x="13.7051%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.17%)</title><rect x="13.9535%" y="261" width="0.1661%" height="15" fill="rgb(248,100,22)" fg:x="84" fg:w="1"/><text x="14.2035%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.50%)</title><rect x="14.1196%" y="277" width="0.4983%" height="15" fill="rgb(208,67,9)" fg:x="85" fg:w="3"/><text x="14.3696%" y="287.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (3 samples, 0.50%)</title><rect x="14.1196%" y="261" width="0.4983%" height="15" fill="rgb(219,133,21)" fg:x="85" fg:w="3"/><text x="14.3696%" y="271.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (3 samples, 0.50%)</title><rect x="14.1196%" y="245" width="0.4983%" height="15" fill="rgb(246,46,29)" fg:x="85" fg:w="3"/><text x="14.3696%" y="255.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (3 samples, 0.50%)</title><rect x="14.1196%" y="229" width="0.4983%" height="15" fill="rgb(246,185,52)" fg:x="85" fg:w="3"/><text x="14.3696%" y="239.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.33%)</title><rect x="14.2857%" y="213" width="0.3322%" height="15" fill="rgb(252,136,11)" fg:x="86" fg:w="2"/><text x="14.5357%" y="223.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="14.4518%" y="197" width="0.1661%" height="15" fill="rgb(219,138,53)" fg:x="87" fg:w="1"/><text x="14.7018%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.17%)</title><rect x="14.6179%" y="229" width="0.1661%" height="15" fill="rgb(211,51,23)" fg:x="88" fg:w="1"/><text x="14.8679%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.17%)</title><rect x="14.6179%" y="213" width="0.1661%" height="15" fill="rgb(247,221,28)" fg:x="88" fg:w="1"/><text x="14.8679%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.17%)</title><rect x="14.7841%" y="229" width="0.1661%" height="15" fill="rgb(251,222,45)" fg:x="89" fg:w="1"/><text x="15.0341%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.17%)</title><rect x="14.7841%" y="213" width="0.1661%" height="15" fill="rgb(217,162,53)" fg:x="89" fg:w="1"/><text x="15.0341%" y="223.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (1 samples, 0.17%)</title><rect x="14.7841%" y="197" width="0.1661%" height="15" fill="rgb(229,93,14)" fg:x="89" fg:w="1"/><text x="15.0341%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="14.7841%" y="181" width="0.1661%" height="15" fill="rgb(209,67,49)" fg:x="89" fg:w="1"/><text x="15.0341%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.17%)</title><rect x="14.7841%" y="165" width="0.1661%" height="15" fill="rgb(213,87,29)" fg:x="89" fg:w="1"/><text x="15.0341%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.17%)</title><rect x="14.7841%" y="149" width="0.1661%" height="15" fill="rgb(205,151,52)" fg:x="89" fg:w="1"/><text x="15.0341%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 1.00%)</title><rect x="14.1196%" y="309" width="0.9967%" height="15" fill="rgb(253,215,39)" fg:x="85" fg:w="6"/><text x="14.3696%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (6 samples, 1.00%)</title><rect x="14.1196%" y="293" width="0.9967%" height="15" fill="rgb(221,220,41)" fg:x="85" fg:w="6"/><text x="14.3696%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.50%)</title><rect x="14.6179%" y="277" width="0.4983%" height="15" fill="rgb(218,133,21)" fg:x="88" fg:w="3"/><text x="14.8679%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.50%)</title><rect x="14.6179%" y="261" width="0.4983%" height="15" fill="rgb(221,193,43)" fg:x="88" fg:w="3"/><text x="14.8679%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.50%)</title><rect x="14.6179%" y="245" width="0.4983%" height="15" fill="rgb(240,128,52)" fg:x="88" fg:w="3"/><text x="14.8679%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.17%)</title><rect x="14.9502%" y="229" width="0.1661%" height="15" fill="rgb(253,114,12)" fg:x="90" fg:w="1"/><text x="15.2002%" y="239.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sstore (18 samples, 2.99%)</title><rect x="12.4585%" y="357" width="2.9900%" height="15" fill="rgb(215,223,47)" fg:x="75" fg:w="18"/><text x="12.7085%" y="367.50">&lt;re..</text></g><g><title>revm::subroutine::SubRoutine::sstore (18 samples, 2.99%)</title><rect x="12.4585%" y="341" width="2.9900%" height="15" fill="rgb(248,225,23)" fg:x="75" fg:w="18"/><text x="12.7085%" y="351.50">rev..</text></g><g><title>revm::subroutine::SubRoutine::sload (16 samples, 2.66%)</title><rect x="12.7907%" y="325" width="2.6578%" height="15" fill="rgb(250,108,0)" fg:x="77" fg:w="16"/><text x="13.0407%" y="335.50">re..</text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (2 samples, 0.33%)</title><rect x="15.1163%" y="309" width="0.3322%" height="15" fill="rgb(228,208,7)" fg:x="91" fg:w="2"/><text x="15.3663%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (2 samples, 0.33%)</title><rect x="15.1163%" y="293" width="0.3322%" height="15" fill="rgb(244,45,10)" fg:x="91" fg:w="2"/><text x="15.3663%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.33%)</title><rect x="15.1163%" y="277" width="0.3322%" height="15" fill="rgb(207,125,25)" fg:x="91" fg:w="2"/><text x="15.3663%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.33%)</title><rect x="15.1163%" y="261" width="0.3322%" height="15" fill="rgb(210,195,18)" fg:x="91" fg:w="2"/><text x="15.3663%" y="271.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.17%)</title><rect x="15.2824%" y="245" width="0.1661%" height="15" fill="rgb(249,80,12)" fg:x="92" fg:w="1"/><text x="15.5324%" y="255.50"></text></g><g><title>revm::instructions::host::sstore (19 samples, 3.16%)</title><rect x="12.4585%" y="373" width="3.1561%" height="15" fill="rgb(221,65,9)" fg:x="75" fg:w="19"/><text x="12.7085%" y="383.50">rev..</text></g><g><title>revm::gas::calc::sstore_refund (1 samples, 0.17%)</title><rect x="15.4485%" y="357" width="0.1661%" height="15" fill="rgb(235,49,36)" fg:x="93" fg:w="1"/><text x="15.6985%" y="367.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialEq&gt;::eq (1 samples, 0.17%)</title><rect x="15.4485%" y="341" width="0.1661%" height="15" fill="rgb(225,32,20)" fg:x="93" fg:w="1"/><text x="15.6985%" y="351.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.17%)</title><rect x="15.4485%" y="325" width="0.1661%" height="15" fill="rgb(215,141,46)" fg:x="93" fg:w="1"/><text x="15.6985%" y="335.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.17%)</title><rect x="15.4485%" y="309" width="0.1661%" height="15" fill="rgb(250,160,47)" fg:x="93" fg:w="1"/><text x="15.6985%" y="319.50"></text></g><g><title>primitive_types::U256::from_big_endian (2 samples, 0.33%)</title><rect x="15.6146%" y="357" width="0.3322%" height="15" fill="rgb(216,222,40)" fg:x="94" fg:w="2"/><text x="15.8646%" y="367.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u64 (1 samples, 0.17%)</title><rect x="15.7807%" y="341" width="0.1661%" height="15" fill="rgb(234,217,39)" fg:x="95" fg:w="1"/><text x="16.0307%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (1 samples, 0.17%)</title><rect x="15.7807%" y="325" width="0.1661%" height="15" fill="rgb(207,178,40)" fg:x="95" fg:w="1"/><text x="16.0307%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (1 samples, 0.17%)</title><rect x="15.7807%" y="309" width="0.1661%" height="15" fill="rgb(221,136,13)" fg:x="95" fg:w="1"/><text x="16.0307%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (1 samples, 0.17%)</title><rect x="15.7807%" y="293" width="0.1661%" height="15" fill="rgb(249,199,10)" fg:x="95" fg:w="1"/><text x="16.0307%" y="303.50"></text></g><g><title>revm::instructions::memory::mload (4 samples, 0.66%)</title><rect x="15.6146%" y="373" width="0.6645%" height="15" fill="rgb(249,222,13)" fg:x="94" fg:w="4"/><text x="15.8646%" y="383.50"></text></g><g><title>revm::interpreter::stack::Stack::push (2 samples, 0.33%)</title><rect x="15.9468%" y="357" width="0.3322%" height="15" fill="rgb(244,185,38)" fg:x="96" fg:w="2"/><text x="16.1968%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.33%)</title><rect x="15.9468%" y="341" width="0.3322%" height="15" fill="rgb(236,202,9)" fg:x="96" fg:w="2"/><text x="16.1968%" y="351.50"></text></g><g><title>core::ptr::write (2 samples, 0.33%)</title><rect x="15.9468%" y="325" width="0.3322%" height="15" fill="rgb(250,229,37)" fg:x="96" fg:w="2"/><text x="16.1968%" y="335.50"></text></g><g><title>revm::instructions::stack::dup (8 samples, 1.33%)</title><rect x="16.2791%" y="373" width="1.3289%" height="15" fill="rgb(206,174,23)" fg:x="98" fg:w="8"/><text x="16.5291%" y="383.50"></text></g><g><title>revm::interpreter::stack::Stack::dup (8 samples, 1.33%)</title><rect x="16.2791%" y="357" width="1.3289%" height="15" fill="rgb(211,33,43)" fg:x="98" fg:w="8"/><text x="16.5291%" y="367.50"></text></g><g><title>revm::instructions::stack::pop (1 samples, 0.17%)</title><rect x="17.6080%" y="373" width="0.1661%" height="15" fill="rgb(245,58,50)" fg:x="106" fg:w="1"/><text x="17.8580%" y="383.50"></text></g><g><title>revm::interpreter::stack::Stack::reduce_one (1 samples, 0.17%)</title><rect x="17.6080%" y="357" width="0.1661%" height="15" fill="rgb(244,68,36)" fg:x="106" fg:w="1"/><text x="17.8580%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.17%)</title><rect x="17.6080%" y="341" width="0.1661%" height="15" fill="rgb(232,229,15)" fg:x="106" fg:w="1"/><text x="17.8580%" y="351.50"></text></g><g><title>revm::instructions::stack::push (4 samples, 0.66%)</title><rect x="17.7741%" y="373" width="0.6645%" height="15" fill="rgb(254,30,23)" fg:x="107" fg:w="4"/><text x="18.0241%" y="383.50"></text></g><g><title>revm::interpreter::stack::Stack::push_slice (3 samples, 0.50%)</title><rect x="17.9402%" y="357" width="0.4983%" height="15" fill="rgb(235,160,14)" fg:x="108" fg:w="3"/><text x="18.1902%" y="367.50"></text></g><g><title>revm::instructions::stack::swap (3 samples, 0.50%)</title><rect x="18.4385%" y="373" width="0.4983%" height="15" fill="rgb(212,155,44)" fg:x="111" fg:w="3"/><text x="18.6885%" y="383.50"></text></g><g><title>revm::interpreter::stack::Stack::swap (3 samples, 0.50%)</title><rect x="18.4385%" y="357" width="0.4983%" height="15" fill="rgb(226,2,50)" fg:x="111" fg:w="3"/><text x="18.6885%" y="367.50"></text></g><g><title>core::ptr::swap (3 samples, 0.50%)</title><rect x="18.4385%" y="341" width="0.4983%" height="15" fill="rgb(234,177,6)" fg:x="111" fg:w="3"/><text x="18.6885%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.50%)</title><rect x="18.4385%" y="325" width="0.4983%" height="15" fill="rgb(217,24,9)" fg:x="111" fg:w="3"/><text x="18.6885%" y="335.50"></text></g><g><title>revm::instructions::system::caller (1 samples, 0.17%)</title><rect x="18.9369%" y="373" width="0.1661%" height="15" fill="rgb(220,13,46)" fg:x="114" fg:w="1"/><text x="19.1869%" y="383.50"></text></g><g><title>&lt;primitive_types::H256 as core::convert::From&lt;primitive_types::H160&gt;&gt;::from (1 samples, 0.17%)</title><rect x="18.9369%" y="357" width="0.1661%" height="15" fill="rgb(239,221,27)" fg:x="114" fg:w="1"/><text x="19.1869%" y="367.50"></text></g><g><title>primitive_types::H256::zero (1 samples, 0.17%)</title><rect x="18.9369%" y="341" width="0.1661%" height="15" fill="rgb(222,198,25)" fg:x="114" fg:w="1"/><text x="19.1869%" y="351.50"></text></g><g><title>primitive_types::H256::repeat_byte (1 samples, 0.17%)</title><rect x="18.9369%" y="325" width="0.1661%" height="15" fill="rgb(211,99,13)" fg:x="114" fg:w="1"/><text x="19.1869%" y="335.50"></text></g><g><title>revm::instructions::system::callvalue (2 samples, 0.33%)</title><rect x="19.1030%" y="373" width="0.3322%" height="15" fill="rgb(232,111,31)" fg:x="115" fg:w="2"/><text x="19.3530%" y="383.50"></text></g><g><title>revm::interpreter::stack::Stack::push_h256 (2 samples, 0.33%)</title><rect x="19.1030%" y="357" width="0.3322%" height="15" fill="rgb(245,82,37)" fg:x="115" fg:w="2"/><text x="19.3530%" y="367.50"></text></g><g><title>primitive_types::U256::from_big_endian (2 samples, 0.33%)</title><rect x="19.1030%" y="341" width="0.3322%" height="15" fill="rgb(227,149,46)" fg:x="115" fg:w="2"/><text x="19.3530%" y="351.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (1 samples, 0.17%)</title><rect x="19.2691%" y="325" width="0.1661%" height="15" fill="rgb(218,36,50)" fg:x="116" fg:w="1"/><text x="19.5191%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.17%)</title><rect x="19.2691%" y="309" width="0.1661%" height="15" fill="rgb(226,80,48)" fg:x="116" fg:w="1"/><text x="19.5191%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.17%)</title><rect x="19.2691%" y="293" width="0.1661%" height="15" fill="rgb(238,224,15)" fg:x="116" fg:w="1"/><text x="19.5191%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.17%)</title><rect x="19.2691%" y="277" width="0.1661%" height="15" fill="rgb(241,136,10)" fg:x="116" fg:w="1"/><text x="19.5191%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.17%)</title><rect x="19.2691%" y="261" width="0.1661%" height="15" fill="rgb(208,32,45)" fg:x="116" fg:w="1"/><text x="19.5191%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.17%)</title><rect x="19.2691%" y="245" width="0.1661%" height="15" fill="rgb(207,135,9)" fg:x="116" fg:w="1"/><text x="19.5191%" y="255.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Div&lt;T&gt;&gt;::div (2 samples, 0.33%)</title><rect x="19.4352%" y="341" width="0.3322%" height="15" fill="rgb(206,86,44)" fg:x="117" fg:w="2"/><text x="19.6852%" y="351.50"></text></g><g><title>primitive_types::U256::div_mod (1 samples, 0.17%)</title><rect x="19.6013%" y="325" width="0.1661%" height="15" fill="rgb(245,177,15)" fg:x="118" fg:w="1"/><text x="19.8513%" y="335.50"></text></g><g><title>primitive_types::U256::div_mod_small (1 samples, 0.17%)</title><rect x="19.6013%" y="309" width="0.1661%" height="15" fill="rgb(206,64,50)" fg:x="118" fg:w="1"/><text x="19.8513%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.17%)</title><rect x="19.6013%" y="293" width="0.1661%" height="15" fill="rgb(234,36,40)" fg:x="118" fg:w="1"/><text x="19.8513%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.17%)</title><rect x="19.6013%" y="277" width="0.1661%" height="15" fill="rgb(213,64,8)" fg:x="118" fg:w="1"/><text x="19.8513%" y="287.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.17%)</title><rect x="19.6013%" y="261" width="0.1661%" height="15" fill="rgb(210,75,36)" fg:x="118" fg:w="1"/><text x="19.8513%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.17%)</title><rect x="19.6013%" y="245" width="0.1661%" height="15" fill="rgb(229,88,21)" fg:x="118" fg:w="1"/><text x="19.8513%" y="255.50"></text></g><g><title>primitive_types::U256::div_mod_small::{{closure}} (1 samples, 0.17%)</title><rect x="19.6013%" y="229" width="0.1661%" height="15" fill="rgb(252,204,47)" fg:x="118" fg:w="1"/><text x="19.8513%" y="239.50"></text></g><g><title>primitive_types::U256::div_mod_word (1 samples, 0.17%)</title><rect x="19.6013%" y="213" width="0.1661%" height="15" fill="rgb(208,77,27)" fg:x="118" fg:w="1"/><text x="19.8513%" y="223.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Rem&lt;T&gt;&gt;::rem (1 samples, 0.17%)</title><rect x="19.7674%" y="341" width="0.1661%" height="15" fill="rgb(221,76,26)" fg:x="119" fg:w="1"/><text x="20.0174%" y="351.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::RemAssign&lt;T&gt;&gt;::rem_assign (1 samples, 0.17%)</title><rect x="19.7674%" y="325" width="0.1661%" height="15" fill="rgb(225,139,18)" fg:x="119" fg:w="1"/><text x="20.0174%" y="335.50"></text></g><g><title>primitive_types::U256::div_mod (1 samples, 0.17%)</title><rect x="19.7674%" y="309" width="0.1661%" height="15" fill="rgb(230,137,11)" fg:x="119" fg:w="1"/><text x="20.0174%" y="319.50"></text></g><g><title>primitive_types::U256::div_mod_small (1 samples, 0.17%)</title><rect x="19.7674%" y="293" width="0.1661%" height="15" fill="rgb(212,28,1)" fg:x="119" fg:w="1"/><text x="20.0174%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.17%)</title><rect x="19.7674%" y="277" width="0.1661%" height="15" fill="rgb(248,164,17)" fg:x="119" fg:w="1"/><text x="20.0174%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.17%)</title><rect x="19.7674%" y="261" width="0.1661%" height="15" fill="rgb(222,171,42)" fg:x="119" fg:w="1"/><text x="20.0174%" y="271.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.17%)</title><rect x="19.7674%" y="245" width="0.1661%" height="15" fill="rgb(243,84,45)" fg:x="119" fg:w="1"/><text x="20.0174%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.17%)</title><rect x="19.7674%" y="229" width="0.1661%" height="15" fill="rgb(252,49,23)" fg:x="119" fg:w="1"/><text x="20.0174%" y="239.50"></text></g><g><title>primitive_types::U256::div_mod_small::{{closure}} (1 samples, 0.17%)</title><rect x="19.7674%" y="213" width="0.1661%" height="15" fill="rgb(215,19,7)" fg:x="119" fg:w="1"/><text x="20.0174%" y="223.50"></text></g><g><title>primitive_types::U256::div_mod_word (1 samples, 0.17%)</title><rect x="19.7674%" y="197" width="0.1661%" height="15" fill="rgb(238,81,41)" fg:x="119" fg:w="1"/><text x="20.0174%" y="207.50"></text></g><g><title>revm::gas::calc::verylowcopy_cost (4 samples, 0.66%)</title><rect x="19.4352%" y="357" width="0.6645%" height="15" fill="rgb(210,199,37)" fg:x="117" fg:w="4"/><text x="19.6852%" y="367.50"></text></g><g><title>primitive_types::U256::checked_mul (1 samples, 0.17%)</title><rect x="19.9336%" y="341" width="0.1661%" height="15" fill="rgb(244,192,49)" fg:x="120" fg:w="1"/><text x="20.1836%" y="351.50"></text></g><g><title>primitive_types::U256::overflowing_mul (1 samples, 0.17%)</title><rect x="19.9336%" y="325" width="0.1661%" height="15" fill="rgb(226,211,11)" fg:x="120" fg:w="1"/><text x="20.1836%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.17%)</title><rect x="19.9336%" y="309" width="0.1661%" height="15" fill="rgb(236,162,54)" fg:x="120" fg:w="1"/><text x="20.1836%" y="319.50"></text></g><g><title>revm::instructions::system::codecopy (7 samples, 1.16%)</title><rect x="19.4352%" y="373" width="1.1628%" height="15" fill="rgb(220,229,9)" fg:x="117" fg:w="7"/><text x="19.6852%" y="383.50"></text></g><g><title>revm::interpreter::memory::Memory::set_data (3 samples, 0.50%)</title><rect x="20.0997%" y="357" width="0.4983%" height="15" fill="rgb(250,87,22)" fg:x="121" fg:w="3"/><text x="20.3497%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.50%)</title><rect x="20.0997%" y="341" width="0.4983%" height="15" fill="rgb(239,43,17)" fg:x="121" fg:w="3"/><text x="20.3497%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.50%)</title><rect x="20.0997%" y="325" width="0.4983%" height="15" fill="rgb(231,177,25)" fg:x="121" fg:w="3"/><text x="20.3497%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.50%)</title><rect x="20.0997%" y="309" width="0.4983%" height="15" fill="rgb(219,179,1)" fg:x="121" fg:w="3"/><text x="20.3497%" y="319.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.17%)</title><rect x="20.7641%" y="261" width="0.1661%" height="15" fill="rgb(238,219,53)" fg:x="125" fg:w="1"/><text x="21.0141%" y="271.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.17%)</title><rect x="20.7641%" y="245" width="0.1661%" height="15" fill="rgb(232,167,36)" fg:x="125" fg:w="1"/><text x="21.0141%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.17%)</title><rect x="20.7641%" y="229" width="0.1661%" height="15" fill="rgb(244,19,51)" fg:x="125" fg:w="1"/><text x="21.0141%" y="239.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.17%)</title><rect x="20.7641%" y="213" width="0.1661%" height="15" fill="rgb(224,6,22)" fg:x="125" fg:w="1"/><text x="21.0141%" y="223.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (36 samples, 5.98%)</title><rect x="20.5980%" y="357" width="5.9801%" height="15" fill="rgb(224,145,5)" fg:x="124" fg:w="36"/><text x="20.8480%" y="367.50">&lt;D as di..</text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (36 samples, 5.98%)</title><rect x="20.5980%" y="341" width="5.9801%" height="15" fill="rgb(234,130,49)" fg:x="124" fg:w="36"/><text x="20.8480%" y="351.50">&lt;D as di..</text></g><g><title>digest::FixedOutput::finalize_fixed (36 samples, 5.98%)</title><rect x="20.5980%" y="325" width="5.9801%" height="15" fill="rgb(254,6,2)" fg:x="124" fg:w="36"/><text x="20.8480%" y="335.50">digest::..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (36 samples, 5.98%)</title><rect x="20.5980%" y="309" width="5.9801%" height="15" fill="rgb(208,96,46)" fg:x="124" fg:w="36"/><text x="20.8480%" y="319.50">&lt;digest:..</text></g><g><title>&lt;sha3::Keccak256Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (36 samples, 5.98%)</title><rect x="20.5980%" y="293" width="5.9801%" height="15" fill="rgb(239,3,39)" fg:x="124" fg:w="36"/><text x="20.8480%" y="303.50">&lt;sha3::K..</text></g><g><title>sha3::state::Sha3State::absorb_block (36 samples, 5.98%)</title><rect x="20.5980%" y="277" width="5.9801%" height="15" fill="rgb(233,210,1)" fg:x="124" fg:w="36"/><text x="20.8480%" y="287.50">sha3::st..</text></g><g><title>keccak::f1600 (34 samples, 5.65%)</title><rect x="20.9302%" y="261" width="5.6478%" height="15" fill="rgb(244,137,37)" fg:x="126" fg:w="34"/><text x="21.1802%" y="271.50">keccak:..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 1.00%)</title><rect x="25.5814%" y="245" width="0.9967%" height="15" fill="rgb(240,136,2)" fg:x="154" fg:w="6"/><text x="25.8314%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.17%)</title><rect x="26.5781%" y="341" width="0.1661%" height="15" fill="rgb(239,18,37)" fg:x="160" fg:w="1"/><text x="26.8281%" y="351.50"></text></g><g><title>primitive_types::U256::bits (1 samples, 0.17%)</title><rect x="26.7442%" y="309" width="0.1661%" height="15" fill="rgb(218,185,22)" fg:x="161" fg:w="1"/><text x="26.9942%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (1 samples, 0.17%)</title><rect x="26.7442%" y="293" width="0.1661%" height="15" fill="rgb(225,218,4)" fg:x="161" fg:w="1"/><text x="26.9942%" y="303.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Div&lt;T&gt;&gt;::div (6 samples, 1.00%)</title><rect x="26.7442%" y="341" width="0.9967%" height="15" fill="rgb(230,182,32)" fg:x="161" fg:w="6"/><text x="26.9942%" y="351.50"></text></g><g><title>primitive_types::U256::div_mod (6 samples, 1.00%)</title><rect x="26.7442%" y="325" width="0.9967%" height="15" fill="rgb(242,56,43)" fg:x="161" fg:w="6"/><text x="26.9942%" y="335.50"></text></g><g><title>primitive_types::U256::div_mod_small (5 samples, 0.83%)</title><rect x="26.9103%" y="309" width="0.8306%" height="15" fill="rgb(233,99,24)" fg:x="162" fg:w="5"/><text x="27.1603%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.83%)</title><rect x="26.9103%" y="293" width="0.8306%" height="15" fill="rgb(234,209,42)" fg:x="162" fg:w="5"/><text x="27.1603%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.83%)</title><rect x="26.9103%" y="277" width="0.8306%" height="15" fill="rgb(227,7,12)" fg:x="162" fg:w="5"/><text x="27.1603%" y="287.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (5 samples, 0.83%)</title><rect x="26.9103%" y="261" width="0.8306%" height="15" fill="rgb(245,203,43)" fg:x="162" fg:w="5"/><text x="27.1603%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (5 samples, 0.83%)</title><rect x="26.9103%" y="245" width="0.8306%" height="15" fill="rgb(238,205,33)" fg:x="162" fg:w="5"/><text x="27.1603%" y="255.50"></text></g><g><title>primitive_types::U256::div_mod_small::{{closure}} (5 samples, 0.83%)</title><rect x="26.9103%" y="229" width="0.8306%" height="15" fill="rgb(231,56,7)" fg:x="162" fg:w="5"/><text x="27.1603%" y="239.50"></text></g><g><title>primitive_types::U256::div_mod_word (5 samples, 0.83%)</title><rect x="26.9103%" y="213" width="0.8306%" height="15" fill="rgb(244,186,29)" fg:x="162" fg:w="5"/><text x="27.1603%" y="223.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Rem&lt;T&gt;&gt;::rem (2 samples, 0.33%)</title><rect x="27.7409%" y="341" width="0.3322%" height="15" fill="rgb(234,111,31)" fg:x="167" fg:w="2"/><text x="27.9909%" y="351.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::RemAssign&lt;T&gt;&gt;::rem_assign (2 samples, 0.33%)</title><rect x="27.7409%" y="325" width="0.3322%" height="15" fill="rgb(241,149,10)" fg:x="167" fg:w="2"/><text x="27.9909%" y="335.50"></text></g><g><title>primitive_types::U256::div_mod (2 samples, 0.33%)</title><rect x="27.7409%" y="309" width="0.3322%" height="15" fill="rgb(249,206,44)" fg:x="167" fg:w="2"/><text x="27.9909%" y="319.50"></text></g><g><title>primitive_types::U256::div_mod_small (2 samples, 0.33%)</title><rect x="27.7409%" y="293" width="0.3322%" height="15" fill="rgb(251,153,30)" fg:x="167" fg:w="2"/><text x="27.9909%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.33%)</title><rect x="27.7409%" y="277" width="0.3322%" height="15" fill="rgb(239,152,38)" fg:x="167" fg:w="2"/><text x="27.9909%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.33%)</title><rect x="27.7409%" y="261" width="0.3322%" height="15" fill="rgb(249,139,47)" fg:x="167" fg:w="2"/><text x="27.9909%" y="271.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (2 samples, 0.33%)</title><rect x="27.7409%" y="245" width="0.3322%" height="15" fill="rgb(244,64,35)" fg:x="167" fg:w="2"/><text x="27.9909%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.33%)</title><rect x="27.7409%" y="229" width="0.3322%" height="15" fill="rgb(216,46,15)" fg:x="167" fg:w="2"/><text x="27.9909%" y="239.50"></text></g><g><title>primitive_types::U256::div_mod_small::{{closure}} (2 samples, 0.33%)</title><rect x="27.7409%" y="213" width="0.3322%" height="15" fill="rgb(250,74,19)" fg:x="167" fg:w="2"/><text x="27.9909%" y="223.50"></text></g><g><title>primitive_types::U256::div_mod_word (2 samples, 0.33%)</title><rect x="27.7409%" y="197" width="0.3322%" height="15" fill="rgb(249,42,33)" fg:x="167" fg:w="2"/><text x="27.9909%" y="207.50"></text></g><g><title>revm::gas::calc::sha3_cost (11 samples, 1.83%)</title><rect x="26.5781%" y="357" width="1.8272%" height="15" fill="rgb(242,149,17)" fg:x="160" fg:w="11"/><text x="26.8281%" y="367.50">r..</text></g><g><title>primitive_types::U256::checked_mul (2 samples, 0.33%)</title><rect x="28.0731%" y="341" width="0.3322%" height="15" fill="rgb(244,29,21)" fg:x="169" fg:w="2"/><text x="28.3231%" y="351.50"></text></g><g><title>revm::interpreter::memory::Memory::get_slice (1 samples, 0.17%)</title><rect x="28.4053%" y="357" width="0.1661%" height="15" fill="rgb(220,130,37)" fg:x="171" fg:w="1"/><text x="28.6553%" y="367.50"></text></g><g><title>revm::interpreter::Interpreter::run (128 samples, 21.26%)</title><rect x="7.4751%" y="405" width="21.2625%" height="15" fill="rgb(211,67,2)" fg:x="45" fg:w="128"/><text x="7.7251%" y="415.50">revm::interpreter::Interpreter::run</text></g><g><title>revm::instructions::eval (125 samples, 20.76%)</title><rect x="7.9734%" y="389" width="20.7641%" height="15" fill="rgb(235,68,52)" fg:x="48" fg:w="125"/><text x="8.2234%" y="399.50">revm::instructions::eval</text></g><g><title>revm::instructions::system::sha3 (49 samples, 8.14%)</title><rect x="20.5980%" y="373" width="8.1395%" height="15" fill="rgb(246,142,3)" fg:x="124" fg:w="49"/><text x="20.8480%" y="383.50">revm::instr..</text></g><g><title>revm::interpreter::stack::Stack::push_h256 (1 samples, 0.17%)</title><rect x="28.5714%" y="357" width="0.1661%" height="15" fill="rgb(241,25,7)" fg:x="172" fg:w="1"/><text x="28.8214%" y="367.50"></text></g><g><title>primitive_types::U256::from_big_endian (1 samples, 0.17%)</title><rect x="28.5714%" y="341" width="0.1661%" height="15" fill="rgb(242,119,39)" fg:x="172" fg:w="1"/><text x="28.8214%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.17%)</title><rect x="28.5714%" y="325" width="0.1661%" height="15" fill="rgb(241,98,45)" fg:x="172" fg:w="1"/><text x="28.8214%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.17%)</title><rect x="28.5714%" y="309" width="0.1661%" height="15" fill="rgb(254,28,30)" fg:x="172" fg:w="1"/><text x="28.8214%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="28.5714%" y="293" width="0.1661%" height="15" fill="rgb(241,142,54)" fg:x="172" fg:w="1"/><text x="28.8214%" y="303.50"></text></g><g><title>revm::interpreter::contract::Contract::new_with_context (311 samples, 51.66%)</title><rect x="28.7375%" y="405" width="51.6611%" height="15" fill="rgb(222,85,15)" fg:x="173" fg:w="311"/><text x="28.9875%" y="415.50">revm::interpreter::contract::Contract::new_with_context</text></g><g><title>revm::interpreter::contract::Contract::new (311 samples, 51.66%)</title><rect x="28.7375%" y="389" width="51.6611%" height="15" fill="rgb(210,85,47)" fg:x="173" fg:w="311"/><text x="28.9875%" y="399.50">revm::interpreter::contract::Contract::new</text></g><g><title>revm::interpreter::bytecode::Bytecode::lock (311 samples, 51.66%)</title><rect x="28.7375%" y="373" width="51.6611%" height="15" fill="rgb(224,206,25)" fg:x="173" fg:w="311"/><text x="28.9875%" y="383.50">revm::interpreter::bytecode::Bytecode::lock</text></g><g><title>revm::interpreter::bytecode::Bytecode::to_analyzed (311 samples, 51.66%)</title><rect x="28.7375%" y="357" width="51.6611%" height="15" fill="rgb(243,201,19)" fg:x="173" fg:w="311"/><text x="28.9875%" y="367.50">revm::interpreter::bytecode::Bytecode::to_analyzed</text></g><g><title>revm::interpreter::bytecode::Bytecode::analyze (311 samples, 51.66%)</title><rect x="28.7375%" y="341" width="51.6611%" height="15" fill="rgb(236,59,4)" fg:x="173" fg:w="311"/><text x="28.9875%" y="351.50">revm::interpreter::bytecode::Bytecode::analyze</text></g><g><title>alloc::vec::from_elem (69 samples, 11.46%)</title><rect x="68.9369%" y="325" width="11.4618%" height="15" fill="rgb(254,179,45)" fg:x="415" fg:w="69"/><text x="69.1869%" y="335.50">alloc::vec::from_..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (69 samples, 11.46%)</title><rect x="68.9369%" y="309" width="11.4618%" height="15" fill="rgb(226,14,10)" fg:x="415" fg:w="69"/><text x="69.1869%" y="319.50">&lt;T as alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (69 samples, 11.46%)</title><rect x="68.9369%" y="293" width="11.4618%" height="15" fill="rgb(244,27,41)" fg:x="415" fg:w="69"/><text x="69.1869%" y="303.50">alloc::vec::Vec&lt;T..</text></g><g><title>core::ptr::write (69 samples, 11.46%)</title><rect x="68.9369%" y="277" width="11.4618%" height="15" fill="rgb(235,35,32)" fg:x="415" fg:w="69"/><text x="69.1869%" y="287.50">core::ptr::write</text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (1 samples, 0.17%)</title><rect x="80.3987%" y="373" width="0.1661%" height="15" fill="rgb(218,68,31)" fg:x="484" fg:w="1"/><text x="80.6487%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (1 samples, 0.17%)</title><rect x="80.3987%" y="357" width="0.1661%" height="15" fill="rgb(207,120,37)" fg:x="484" fg:w="1"/><text x="80.6487%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.17%)</title><rect x="80.3987%" y="341" width="0.1661%" height="15" fill="rgb(227,98,0)" fg:x="484" fg:w="1"/><text x="80.6487%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.17%)</title><rect x="80.3987%" y="325" width="0.1661%" height="15" fill="rgb(207,7,3)" fg:x="484" fg:w="1"/><text x="80.6487%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.17%)</title><rect x="80.3987%" y="309" width="0.1661%" height="15" fill="rgb(206,98,19)" fg:x="484" fg:w="1"/><text x="80.6487%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.17%)</title><rect x="80.3987%" y="293" width="0.1661%" height="15" fill="rgb(217,5,26)" fg:x="484" fg:w="1"/><text x="80.6487%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.17%)</title><rect x="80.3987%" y="277" width="0.1661%" height="15" fill="rgb(235,190,38)" fg:x="484" fg:w="1"/><text x="80.6487%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.17%)</title><rect x="80.3987%" y="261" width="0.1661%" height="15" fill="rgb(247,86,24)" fg:x="484" fg:w="1"/><text x="80.6487%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.17%)</title><rect x="80.3987%" y="245" width="0.1661%" height="15" fill="rgb(205,101,16)" fg:x="484" fg:w="1"/><text x="80.6487%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.17%)</title><rect x="80.3987%" y="229" width="0.1661%" height="15" fill="rgb(246,168,33)" fg:x="484" fg:w="1"/><text x="80.6487%" y="239.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.17%)</title><rect x="80.3987%" y="213" width="0.1661%" height="15" fill="rgb(231,114,1)" fg:x="484" fg:w="1"/><text x="80.6487%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (1 samples, 0.17%)</title><rect x="80.3987%" y="197" width="0.1661%" height="15" fill="rgb(207,184,53)" fg:x="484" fg:w="1"/><text x="80.6487%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.17%)</title><rect x="80.3987%" y="181" width="0.1661%" height="15" fill="rgb(224,95,51)" fg:x="484" fg:w="1"/><text x="80.6487%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="80.3987%" y="165" width="0.1661%" height="15" fill="rgb(212,188,45)" fg:x="484" fg:w="1"/><text x="80.6487%" y="175.50"></text></g><g><title>_int_malloc (1 samples, 0.17%)</title><rect x="80.3987%" y="149" width="0.1661%" height="15" fill="rgb(223,154,38)" fg:x="484" fg:w="1"/><text x="80.6487%" y="159.50"></text></g><g><title>revm::subroutine::SubRoutine::balance_add (3 samples, 0.50%)</title><rect x="80.3987%" y="405" width="0.4983%" height="15" fill="rgb(251,22,52)" fg:x="484" fg:w="3"/><text x="80.6487%" y="415.50"></text></g><g><title>revm::subroutine::SubRoutine::log_dirty (3 samples, 0.50%)</title><rect x="80.3987%" y="389" width="0.4983%" height="15" fill="rgb(229,209,22)" fg:x="484" fg:w="3"/><text x="80.6487%" y="399.50"></text></g><g><title>revm::subroutine::Filth::make_dirty (2 samples, 0.33%)</title><rect x="80.5648%" y="373" width="0.3322%" height="15" fill="rgb(234,138,34)" fg:x="485" fg:w="2"/><text x="80.8148%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V&gt;::new (2 samples, 0.33%)</title><rect x="80.5648%" y="357" width="0.3322%" height="15" fill="rgb(212,95,11)" fg:x="485" fg:w="2"/><text x="80.8148%" y="367.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (2 samples, 0.33%)</title><rect x="80.5648%" y="341" width="0.3322%" height="15" fill="rgb(240,179,47)" fg:x="485" fg:w="2"/><text x="80.8148%" y="351.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (2 samples, 0.33%)</title><rect x="80.5648%" y="325" width="0.3322%" height="15" fill="rgb(240,163,11)" fg:x="485" fg:w="2"/><text x="80.8148%" y="335.50"></text></g><g><title>ahash::random_state::RandomState::new (2 samples, 0.33%)</title><rect x="80.5648%" y="309" width="0.3322%" height="15" fill="rgb(236,37,12)" fg:x="485" fg:w="2"/><text x="80.8148%" y="319.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (2 samples, 0.33%)</title><rect x="80.5648%" y="293" width="0.3322%" height="15" fill="rgb(232,164,16)" fg:x="485" fg:w="2"/><text x="80.8148%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.33%)</title><rect x="80.5648%" y="277" width="0.3322%" height="15" fill="rgb(244,205,15)" fg:x="485" fg:w="2"/><text x="80.8148%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.33%)</title><rect x="80.5648%" y="261" width="0.3322%" height="15" fill="rgb(223,117,47)" fg:x="485" fg:w="2"/><text x="80.8148%" y="271.50"></text></g><g><title>revm::subroutine::SubRoutine::create_checkpoint (1 samples, 0.17%)</title><rect x="80.8970%" y="405" width="0.1661%" height="15" fill="rgb(244,107,35)" fg:x="487" fg:w="1"/><text x="81.1470%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="80.8970%" y="389" width="0.1661%" height="15" fill="rgb(205,140,8)" fg:x="487" fg:w="1"/><text x="81.1470%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="80.8970%" y="373" width="0.1661%" height="15" fill="rgb(228,84,46)" fg:x="487" fg:w="1"/><text x="81.1470%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="80.8970%" y="357" width="0.1661%" height="15" fill="rgb(254,188,9)" fg:x="487" fg:w="1"/><text x="81.1470%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="80.8970%" y="341" width="0.1661%" height="15" fill="rgb(206,112,54)" fg:x="487" fg:w="1"/><text x="81.1470%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.17%)</title><rect x="80.8970%" y="325" width="0.1661%" height="15" fill="rgb(216,84,49)" fg:x="487" fg:w="1"/><text x="81.1470%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.17%)</title><rect x="80.8970%" y="309" width="0.1661%" height="15" fill="rgb(214,194,35)" fg:x="487" fg:w="1"/><text x="81.1470%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.17%)</title><rect x="80.8970%" y="293" width="0.1661%" height="15" fill="rgb(249,28,3)" fg:x="487" fg:w="1"/><text x="81.1470%" y="303.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.17%)</title><rect x="80.8970%" y="277" width="0.1661%" height="15" fill="rgb(222,56,52)" fg:x="487" fg:w="1"/><text x="81.1470%" y="287.50"></text></g><g><title>_int_realloc (1 samples, 0.17%)</title><rect x="80.8970%" y="261" width="0.1661%" height="15" fill="rgb(245,217,50)" fg:x="487" fg:w="1"/><text x="81.1470%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.17%)</title><rect x="80.8970%" y="245" width="0.1661%" height="15" fill="rgb(213,201,24)" fg:x="487" fg:w="1"/><text x="81.1470%" y="255.50"></text></g><g><title>revm::subroutine::SubRoutine::load_account (1 samples, 0.17%)</title><rect x="81.0631%" y="389" width="0.1661%" height="15" fill="rgb(248,116,28)" fg:x="488" fg:w="1"/><text x="81.3131%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (1 samples, 0.17%)</title><rect x="81.0631%" y="373" width="0.1661%" height="15" fill="rgb(219,72,43)" fg:x="488" fg:w="1"/><text x="81.3131%" y="383.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.17%)</title><rect x="81.0631%" y="357" width="0.1661%" height="15" fill="rgb(209,138,14)" fg:x="488" fg:w="1"/><text x="81.3131%" y="367.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.17%)</title><rect x="81.0631%" y="341" width="0.1661%" height="15" fill="rgb(222,18,33)" fg:x="488" fg:w="1"/><text x="81.3131%" y="351.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="81.0631%" y="325" width="0.1661%" height="15" fill="rgb(213,199,7)" fg:x="488" fg:w="1"/><text x="81.3131%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="81.0631%" y="309" width="0.1661%" height="15" fill="rgb(250,110,10)" fg:x="488" fg:w="1"/><text x="81.3131%" y="319.50"></text></g><g><title>&lt;revm::models::AccountInfo as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="81.3953%" y="373" width="0.1661%" height="15" fill="rgb(248,123,6)" fg:x="490" fg:w="1"/><text x="81.6453%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (2 samples, 0.33%)</title><rect x="81.5615%" y="373" width="0.3322%" height="15" fill="rgb(206,91,31)" fg:x="491" fg:w="2"/><text x="81.8115%" y="383.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.33%)</title><rect x="81.5615%" y="357" width="0.3322%" height="15" fill="rgb(211,154,13)" fg:x="491" fg:w="2"/><text x="81.8115%" y="367.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (2 samples, 0.33%)</title><rect x="81.5615%" y="341" width="0.3322%" height="15" fill="rgb(225,148,7)" fg:x="491" fg:w="2"/><text x="81.8115%" y="351.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (2 samples, 0.33%)</title><rect x="81.5615%" y="325" width="0.3322%" height="15" fill="rgb(220,160,43)" fg:x="491" fg:w="2"/><text x="81.8115%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.33%)</title><rect x="81.5615%" y="309" width="0.3322%" height="15" fill="rgb(213,52,39)" fg:x="491" fg:w="2"/><text x="81.8115%" y="319.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.17%)</title><rect x="81.8937%" y="325" width="0.1661%" height="15" fill="rgb(243,137,7)" fg:x="493" fg:w="1"/><text x="82.1437%" y="335.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.17%)</title><rect x="81.8937%" y="309" width="0.1661%" height="15" fill="rgb(230,79,13)" fg:x="493" fg:w="1"/><text x="82.1437%" y="319.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="81.8937%" y="293" width="0.1661%" height="15" fill="rgb(247,105,23)" fg:x="493" fg:w="1"/><text x="82.1437%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.33%)</title><rect x="81.8937%" y="341" width="0.3322%" height="15" fill="rgb(223,179,41)" fg:x="493" fg:w="2"/><text x="82.1437%" y="351.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.17%)</title><rect x="82.0598%" y="325" width="0.1661%" height="15" fill="rgb(218,9,34)" fg:x="494" fg:w="1"/><text x="82.3098%" y="335.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="82.0598%" y="309" width="0.1661%" height="15" fill="rgb(222,106,8)" fg:x="494" fg:w="1"/><text x="82.3098%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="82.0598%" y="293" width="0.1661%" height="15" fill="rgb(211,220,0)" fg:x="494" fg:w="1"/><text x="82.3098%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.50%)</title><rect x="81.8937%" y="373" width="0.4983%" height="15" fill="rgb(229,52,16)" fg:x="493" fg:w="3"/><text x="82.1437%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.50%)</title><rect x="81.8937%" y="357" width="0.4983%" height="15" fill="rgb(212,155,18)" fg:x="493" fg:w="3"/><text x="82.1437%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.17%)</title><rect x="82.2259%" y="341" width="0.1661%" height="15" fill="rgb(242,21,14)" fg:x="495" fg:w="1"/><text x="82.4759%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.17%)</title><rect x="82.2259%" y="325" width="0.1661%" height="15" fill="rgb(222,19,48)" fg:x="495" fg:w="1"/><text x="82.4759%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.17%)</title><rect x="82.2259%" y="309" width="0.1661%" height="15" fill="rgb(232,45,27)" fg:x="495" fg:w="1"/><text x="82.4759%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.17%)</title><rect x="82.2259%" y="293" width="0.1661%" height="15" fill="rgb(249,103,42)" fg:x="495" fg:w="1"/><text x="82.4759%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.17%)</title><rect x="82.2259%" y="277" width="0.1661%" height="15" fill="rgb(246,81,33)" fg:x="495" fg:w="1"/><text x="82.4759%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V&gt;::new (1 samples, 0.17%)</title><rect x="82.3920%" y="373" width="0.1661%" height="15" fill="rgb(252,33,42)" fg:x="496" fg:w="1"/><text x="82.6420%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (1 samples, 0.17%)</title><rect x="82.3920%" y="357" width="0.1661%" height="15" fill="rgb(209,212,41)" fg:x="496" fg:w="1"/><text x="82.6420%" y="367.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (1 samples, 0.17%)</title><rect x="82.3920%" y="341" width="0.1661%" height="15" fill="rgb(207,154,6)" fg:x="496" fg:w="1"/><text x="82.6420%" y="351.50"></text></g><g><title>ahash::random_state::RandomState::new (1 samples, 0.17%)</title><rect x="82.3920%" y="325" width="0.1661%" height="15" fill="rgb(223,64,47)" fg:x="496" fg:w="1"/><text x="82.6420%" y="335.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (1 samples, 0.17%)</title><rect x="82.3920%" y="309" width="0.1661%" height="15" fill="rgb(211,161,38)" fg:x="496" fg:w="1"/><text x="82.6420%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.17%)</title><rect x="82.3920%" y="293" width="0.1661%" height="15" fill="rgb(219,138,40)" fg:x="496" fg:w="1"/><text x="82.6420%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.17%)</title><rect x="82.3920%" y="277" width="0.1661%" height="15" fill="rgb(241,228,46)" fg:x="496" fg:w="1"/><text x="82.6420%" y="287.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (466 samples, 77.41%)</title><rect x="5.3156%" y="421" width="77.4086%" height="15" fill="rgb(223,209,38)" fg:x="32" fg:w="466"/><text x="5.5656%" y="431.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::subroutine::SubRoutine::transfer (10 samples, 1.66%)</title><rect x="81.0631%" y="405" width="1.6611%" height="15" fill="rgb(236,164,45)" fg:x="488" fg:w="10"/><text x="81.3131%" y="415.50"></text></g><g><title>revm::subroutine::SubRoutine::log_dirty (9 samples, 1.50%)</title><rect x="81.2292%" y="389" width="1.4950%" height="15" fill="rgb(231,15,5)" fg:x="489" fg:w="9"/><text x="81.4792%" y="399.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (1 samples, 0.17%)</title><rect x="82.5581%" y="373" width="0.1661%" height="15" fill="rgb(252,35,15)" fg:x="497" fg:w="1"/><text x="82.8081%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (1 samples, 0.17%)</title><rect x="82.5581%" y="357" width="0.1661%" height="15" fill="rgb(248,181,18)" fg:x="497" fg:w="1"/><text x="82.8081%" y="367.50"></text></g><g><title>revm::gas::Gas::refunded (1 samples, 0.17%)</title><rect x="82.7243%" y="405" width="0.1661%" height="15" fill="rgb(233,39,42)" fg:x="498" fg:w="1"/><text x="82.9743%" y="415.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.17%)</title><rect x="82.8904%" y="357" width="0.1661%" height="15" fill="rgb(238,110,33)" fg:x="499" fg:w="1"/><text x="83.1404%" y="367.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.17%)</title><rect x="82.8904%" y="341" width="0.1661%" height="15" fill="rgb(233,195,10)" fg:x="499" fg:w="1"/><text x="83.1404%" y="351.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="82.8904%" y="325" width="0.1661%" height="15" fill="rgb(254,105,3)" fg:x="499" fg:w="1"/><text x="83.1404%" y="335.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.17%)</title><rect x="82.8904%" y="309" width="0.1661%" height="15" fill="rgb(221,225,9)" fg:x="499" fg:w="1"/><text x="83.1404%" y="319.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.17%)</title><rect x="82.8904%" y="293" width="0.1661%" height="15" fill="rgb(224,227,45)" fg:x="499" fg:w="1"/><text x="83.1404%" y="303.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="82.8904%" y="277" width="0.1661%" height="15" fill="rgb(229,198,43)" fg:x="499" fg:w="1"/><text x="83.1404%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (3 samples, 0.50%)</title><rect x="82.8904%" y="373" width="0.4983%" height="15" fill="rgb(206,209,35)" fg:x="499" fg:w="3"/><text x="83.1404%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.33%)</title><rect x="83.0565%" y="357" width="0.3322%" height="15" fill="rgb(245,195,53)" fg:x="500" fg:w="2"/><text x="83.3065%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.33%)</title><rect x="83.0565%" y="341" width="0.3322%" height="15" fill="rgb(240,92,26)" fg:x="500" fg:w="2"/><text x="83.3065%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.33%)</title><rect x="83.0565%" y="325" width="0.3322%" height="15" fill="rgb(207,40,23)" fg:x="500" fg:w="2"/><text x="83.3065%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.33%)</title><rect x="83.0565%" y="309" width="0.3322%" height="15" fill="rgb(223,111,35)" fg:x="500" fg:w="2"/><text x="83.3065%" y="319.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (2 samples, 0.33%)</title><rect x="83.0565%" y="293" width="0.3322%" height="15" fill="rgb(229,147,28)" fg:x="500" fg:w="2"/><text x="83.3065%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.33%)</title><rect x="83.0565%" y="277" width="0.3322%" height="15" fill="rgb(211,29,28)" fg:x="500" fg:w="2"/><text x="83.3065%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.33%)</title><rect x="83.0565%" y="261" width="0.3322%" height="15" fill="rgb(228,72,33)" fg:x="500" fg:w="2"/><text x="83.3065%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.33%)</title><rect x="83.0565%" y="245" width="0.3322%" height="15" fill="rgb(205,214,31)" fg:x="500" fg:w="2"/><text x="83.3065%" y="255.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.17%)</title><rect x="83.3887%" y="325" width="0.1661%" height="15" fill="rgb(224,111,15)" fg:x="502" fg:w="1"/><text x="83.6387%" y="335.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.17%)</title><rect x="83.3887%" y="309" width="0.1661%" height="15" fill="rgb(253,21,26)" fg:x="502" fg:w="1"/><text x="83.6387%" y="319.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.17%)</title><rect x="83.5548%" y="293" width="0.1661%" height="15" fill="rgb(245,139,43)" fg:x="503" fg:w="1"/><text x="83.8048%" y="303.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.17%)</title><rect x="83.5548%" y="277" width="0.1661%" height="15" fill="rgb(252,170,7)" fg:x="503" fg:w="1"/><text x="83.8048%" y="287.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="83.5548%" y="261" width="0.1661%" height="15" fill="rgb(231,118,14)" fg:x="503" fg:w="1"/><text x="83.8048%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.83%)</title><rect x="83.3887%" y="341" width="0.8306%" height="15" fill="rgb(238,83,0)" fg:x="502" fg:w="5"/><text x="83.6387%" y="351.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (4 samples, 0.66%)</title><rect x="83.5548%" y="325" width="0.6645%" height="15" fill="rgb(221,39,39)" fg:x="503" fg:w="4"/><text x="83.8048%" y="335.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (4 samples, 0.66%)</title><rect x="83.5548%" y="309" width="0.6645%" height="15" fill="rgb(222,119,46)" fg:x="503" fg:w="4"/><text x="83.8048%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (3 samples, 0.50%)</title><rect x="83.7209%" y="293" width="0.4983%" height="15" fill="rgb(222,165,49)" fg:x="504" fg:w="3"/><text x="83.9709%" y="303.50"></text></g><g><title>revm::subroutine::SubRoutine::balance_add (9 samples, 1.50%)</title><rect x="82.8904%" y="405" width="1.4950%" height="15" fill="rgb(219,113,52)" fg:x="499" fg:w="9"/><text x="83.1404%" y="415.50"></text></g><g><title>revm::subroutine::SubRoutine::log_dirty (9 samples, 1.50%)</title><rect x="82.8904%" y="389" width="1.4950%" height="15" fill="rgb(214,7,15)" fg:x="499" fg:w="9"/><text x="83.1404%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 1.00%)</title><rect x="83.3887%" y="373" width="0.9967%" height="15" fill="rgb(235,32,4)" fg:x="502" fg:w="6"/><text x="83.6387%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (6 samples, 1.00%)</title><rect x="83.3887%" y="357" width="0.9967%" height="15" fill="rgb(238,90,54)" fg:x="502" fg:w="6"/><text x="83.6387%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.17%)</title><rect x="84.2193%" y="341" width="0.1661%" height="15" fill="rgb(213,208,19)" fg:x="507" fg:w="1"/><text x="84.4693%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.17%)</title><rect x="84.2193%" y="325" width="0.1661%" height="15" fill="rgb(233,156,4)" fg:x="507" fg:w="1"/><text x="84.4693%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.17%)</title><rect x="84.2193%" y="309" width="0.1661%" height="15" fill="rgb(207,194,5)" fg:x="507" fg:w="1"/><text x="84.4693%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.17%)</title><rect x="84.7176%" y="357" width="0.1661%" height="15" fill="rgb(206,111,30)" fg:x="510" fg:w="1"/><text x="84.9676%" y="367.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.50%)</title><rect x="84.7176%" y="389" width="0.4983%" height="15" fill="rgb(243,70,54)" fg:x="510" fg:w="3"/><text x="84.9676%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.50%)</title><rect x="84.7176%" y="373" width="0.4983%" height="15" fill="rgb(242,28,8)" fg:x="510" fg:w="3"/><text x="84.9676%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.33%)</title><rect x="84.8837%" y="357" width="0.3322%" height="15" fill="rgb(219,106,18)" fg:x="511" fg:w="2"/><text x="85.1337%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hashbrown::map::HashMap&lt;primitive_types::H160,revm::subroutine::ChangeLog&gt;&gt;&gt; (4 samples, 0.66%)</title><rect x="85.2159%" y="389" width="0.6645%" height="15" fill="rgb(244,222,10)" fg:x="513" fg:w="4"/><text x="85.4659%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.66%)</title><rect x="85.2159%" y="373" width="0.6645%" height="15" fill="rgb(236,179,52)" fg:x="513" fg:w="4"/><text x="85.4659%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[hashbrown::map::HashMap&lt;primitive_types::H160,revm::subroutine::ChangeLog&gt;]&gt; (4 samples, 0.66%)</title><rect x="85.2159%" y="357" width="0.6645%" height="15" fill="rgb(213,23,39)" fg:x="513" fg:w="4"/><text x="85.4659%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;primitive_types::H160,revm::subroutine::ChangeLog&gt;&gt; (4 samples, 0.66%)</title><rect x="85.2159%" y="341" width="0.6645%" height="15" fill="rgb(238,48,10)" fg:x="513" fg:w="4"/><text x="85.4659%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(primitive_types::H160,revm::subroutine::ChangeLog)&gt;&gt; (4 samples, 0.66%)</title><rect x="85.2159%" y="325" width="0.6645%" height="15" fill="rgb(251,196,23)" fg:x="513" fg:w="4"/><text x="85.4659%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.66%)</title><rect x="85.2159%" y="309" width="0.6645%" height="15" fill="rgb(250,152,24)" fg:x="513" fg:w="4"/><text x="85.4659%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (4 samples, 0.66%)</title><rect x="85.2159%" y="293" width="0.6645%" height="15" fill="rgb(209,150,17)" fg:x="513" fg:w="4"/><text x="85.4659%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.66%)</title><rect x="85.2159%" y="277" width="0.6645%" height="15" fill="rgb(234,202,34)" fg:x="513" fg:w="4"/><text x="85.4659%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4 samples, 0.66%)</title><rect x="85.2159%" y="261" width="0.6645%" height="15" fill="rgb(253,148,53)" fg:x="513" fg:w="4"/><text x="85.4659%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(primitive_types::H160,revm::subroutine::ChangeLog)&gt; (4 samples, 0.66%)</title><rect x="85.2159%" y="245" width="0.6645%" height="15" fill="rgb(218,129,16)" fg:x="513" fg:w="4"/><text x="85.4659%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::subroutine::ChangeLog&gt; (4 samples, 0.66%)</title><rect x="85.2159%" y="229" width="0.6645%" height="15" fill="rgb(216,85,19)" fg:x="513" fg:w="4"/><text x="85.4659%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::subroutine::DirtyChangeLog&gt; (3 samples, 0.50%)</title><rect x="85.3821%" y="213" width="0.4983%" height="15" fill="rgb(235,228,7)" fg:x="514" fg:w="3"/><text x="85.6321%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::models::AccountInfo&gt; (3 samples, 0.50%)</title><rect x="85.3821%" y="197" width="0.4983%" height="15" fill="rgb(245,175,0)" fg:x="514" fg:w="3"/><text x="85.6321%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm::interpreter::bytecode::Bytecode&gt;&gt; (3 samples, 0.50%)</title><rect x="85.3821%" y="181" width="0.4983%" height="15" fill="rgb(208,168,36)" fg:x="514" fg:w="3"/><text x="85.6321%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::bytecode::Bytecode&gt; (3 samples, 0.50%)</title><rect x="85.3821%" y="165" width="0.4983%" height="15" fill="rgb(246,171,24)" fg:x="514" fg:w="3"/><text x="85.6321%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.50%)</title><rect x="85.3821%" y="149" width="0.4983%" height="15" fill="rgb(215,142,24)" fg:x="514" fg:w="3"/><text x="85.6321%" y="159.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.50%)</title><rect x="85.3821%" y="133" width="0.4983%" height="15" fill="rgb(250,187,7)" fg:x="514" fg:w="3"/><text x="85.6321%" y="143.50"></text></g><g><title>bytes::bytes::shared_drop (3 samples, 0.50%)</title><rect x="85.3821%" y="117" width="0.4983%" height="15" fill="rgb(228,66,33)" fg:x="514" fg:w="3"/><text x="85.6321%" y="127.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (3 samples, 0.50%)</title><rect x="85.3821%" y="101" width="0.4983%" height="15" fill="rgb(234,215,21)" fg:x="514" fg:w="3"/><text x="85.6321%" y="111.50"></text></g><g><title>bytes::bytes::shared_drop::{{closure}} (3 samples, 0.50%)</title><rect x="85.3821%" y="85" width="0.4983%" height="15" fill="rgb(222,191,20)" fg:x="514" fg:w="3"/><text x="85.6321%" y="95.50"></text></g><g><title>bytes::bytes::release_shared (3 samples, 0.50%)</title><rect x="85.3821%" y="69" width="0.4983%" height="15" fill="rgb(245,79,54)" fg:x="514" fg:w="3"/><text x="85.6321%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.50%)</title><rect x="85.3821%" y="53" width="0.4983%" height="15" fill="rgb(240,10,37)" fg:x="514" fg:w="3"/><text x="85.6321%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.50%)</title><rect x="85.3821%" y="37" width="0.4983%" height="15" fill="rgb(214,192,32)" fg:x="514" fg:w="3"/><text x="85.6321%" y="47.50"></text></g><g><title>__GI___libc_free (1 samples, 0.17%)</title><rect x="85.8804%" y="325" width="0.1661%" height="15" fill="rgb(209,36,54)" fg:x="517" fg:w="1"/><text x="86.1304%" y="335.50"></text></g><g><title>__rust_dealloc (1 samples, 0.17%)</title><rect x="86.0465%" y="325" width="0.1661%" height="15" fill="rgb(220,10,11)" fg:x="518" fg:w="1"/><text x="86.2965%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.50%)</title><rect x="85.8804%" y="357" width="0.4983%" height="15" fill="rgb(221,106,17)" fg:x="517" fg:w="3"/><text x="86.1304%" y="367.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.50%)</title><rect x="85.8804%" y="341" width="0.4983%" height="15" fill="rgb(251,142,44)" fg:x="517" fg:w="3"/><text x="86.1304%" y="351.50"></text></g><g><title>_int_free (1 samples, 0.17%)</title><rect x="86.2126%" y="325" width="0.1661%" height="15" fill="rgb(238,13,15)" fg:x="519" fg:w="1"/><text x="86.4626%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm::interpreter::bytecode::Bytecode&gt;&gt; (4 samples, 0.66%)</title><rect x="85.8804%" y="389" width="0.6645%" height="15" fill="rgb(208,107,27)" fg:x="517" fg:w="4"/><text x="86.1304%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::bytecode::Bytecode&gt; (4 samples, 0.66%)</title><rect x="85.8804%" y="373" width="0.6645%" height="15" fill="rgb(205,136,37)" fg:x="517" fg:w="4"/><text x="86.1304%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::bytecode::BytecodeState&gt; (1 samples, 0.17%)</title><rect x="86.3787%" y="357" width="0.1661%" height="15" fill="rgb(250,205,27)" fg:x="520" fg:w="1"/><text x="86.6287%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;primitive_types::H160,revm::subroutine::Account&gt;&gt; (4 samples, 0.66%)</title><rect x="86.5449%" y="389" width="0.6645%" height="15" fill="rgb(210,80,43)" fg:x="521" fg:w="4"/><text x="86.7949%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(primitive_types::H160,revm::subroutine::Account)&gt;&gt; (4 samples, 0.66%)</title><rect x="86.5449%" y="373" width="0.6645%" height="15" fill="rgb(247,160,36)" fg:x="521" fg:w="4"/><text x="86.7949%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.66%)</title><rect x="86.5449%" y="357" width="0.6645%" height="15" fill="rgb(234,13,49)" fg:x="521" fg:w="4"/><text x="86.7949%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::deallocate (4 samples, 0.66%)</title><rect x="86.5449%" y="341" width="0.6645%" height="15" fill="rgb(234,122,0)" fg:x="521" fg:w="4"/><text x="86.7949%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.66%)</title><rect x="86.5449%" y="325" width="0.6645%" height="15" fill="rgb(207,146,38)" fg:x="521" fg:w="4"/><text x="86.7949%" y="335.50"></text></g><g><title>_int_free (4 samples, 0.66%)</title><rect x="86.5449%" y="309" width="0.6645%" height="15" fill="rgb(207,177,25)" fg:x="521" fg:w="4"/><text x="86.7949%" y="319.50"></text></g><g><title>malloc_consolidate (4 samples, 0.66%)</title><rect x="86.5449%" y="293" width="0.6645%" height="15" fill="rgb(211,178,42)" fg:x="521" fg:w="4"/><text x="86.7949%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.17%)</title><rect x="87.2093%" y="373" width="0.1661%" height="15" fill="rgb(230,69,54)" fg:x="525" fg:w="1"/><text x="87.4593%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.17%)</title><rect x="87.2093%" y="357" width="0.1661%" height="15" fill="rgb(214,135,41)" fg:x="525" fg:w="1"/><text x="87.4593%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.17%)</title><rect x="87.2093%" y="341" width="0.1661%" height="15" fill="rgb(237,67,25)" fg:x="525" fg:w="1"/><text x="87.4593%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.17%)</title><rect x="87.2093%" y="325" width="0.1661%" height="15" fill="rgb(222,189,50)" fg:x="525" fg:w="1"/><text x="87.4593%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.17%)</title><rect x="87.2093%" y="309" width="0.1661%" height="15" fill="rgb(245,148,34)" fg:x="525" fg:w="1"/><text x="87.4593%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.17%)</title><rect x="87.2093%" y="293" width="0.1661%" height="15" fill="rgb(222,29,6)" fg:x="525" fg:w="1"/><text x="87.4593%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.66%)</title><rect x="87.2093%" y="389" width="0.6645%" height="15" fill="rgb(221,189,43)" fg:x="525" fg:w="4"/><text x="87.4593%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.50%)</title><rect x="87.3754%" y="373" width="0.4983%" height="15" fill="rgb(207,36,27)" fg:x="526" fg:w="3"/><text x="87.6254%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.50%)</title><rect x="87.3754%" y="357" width="0.4983%" height="15" fill="rgb(217,90,24)" fg:x="526" fg:w="3"/><text x="87.6254%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.50%)</title><rect x="87.3754%" y="341" width="0.4983%" height="15" fill="rgb(224,66,35)" fg:x="526" fg:w="3"/><text x="87.6254%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (3 samples, 0.50%)</title><rect x="87.3754%" y="325" width="0.4983%" height="15" fill="rgb(221,13,50)" fg:x="526" fg:w="3"/><text x="87.6254%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (3 samples, 0.50%)</title><rect x="87.3754%" y="309" width="0.4983%" height="15" fill="rgb(236,68,49)" fg:x="526" fg:w="3"/><text x="87.6254%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (3 samples, 0.50%)</title><rect x="87.3754%" y="293" width="0.4983%" height="15" fill="rgb(229,146,28)" fg:x="526" fg:w="3"/><text x="87.6254%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (3 samples, 0.50%)</title><rect x="87.3754%" y="277" width="0.4983%" height="15" fill="rgb(225,31,38)" fg:x="526" fg:w="3"/><text x="87.6254%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (3 samples, 0.50%)</title><rect x="87.3754%" y="261" width="0.4983%" height="15" fill="rgb(250,208,3)" fg:x="526" fg:w="3"/><text x="87.6254%" y="271.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.50%)</title><rect x="87.3754%" y="245" width="0.4983%" height="15" fill="rgb(246,54,23)" fg:x="526" fg:w="3"/><text x="87.6254%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (3 samples, 0.50%)</title><rect x="87.3754%" y="229" width="0.4983%" height="15" fill="rgb(243,76,11)" fg:x="526" fg:w="3"/><text x="87.6254%" y="239.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.50%)</title><rect x="87.3754%" y="213" width="0.4983%" height="15" fill="rgb(245,21,50)" fg:x="526" fg:w="3"/><text x="87.6254%" y="223.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.50%)</title><rect x="87.3754%" y="197" width="0.4983%" height="15" fill="rgb(228,9,43)" fg:x="526" fg:w="3"/><text x="87.6254%" y="207.50"></text></g><g><title>_int_malloc (3 samples, 0.50%)</title><rect x="87.3754%" y="181" width="0.4983%" height="15" fill="rgb(208,100,47)" fg:x="526" fg:w="3"/><text x="87.6254%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1 samples, 0.17%)</title><rect x="87.8738%" y="389" width="0.1661%" height="15" fill="rgb(232,26,8)" fg:x="529" fg:w="1"/><text x="88.1238%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.17%)</title><rect x="87.8738%" y="373" width="0.1661%" height="15" fill="rgb(216,166,38)" fg:x="529" fg:w="1"/><text x="88.1238%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.17%)</title><rect x="87.8738%" y="357" width="0.1661%" height="15" fill="rgb(251,202,51)" fg:x="529" fg:w="1"/><text x="88.1238%" y="367.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.17%)</title><rect x="87.8738%" y="341" width="0.1661%" height="15" fill="rgb(254,216,34)" fg:x="529" fg:w="1"/><text x="88.1238%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.17%)</title><rect x="87.8738%" y="325" width="0.1661%" height="15" fill="rgb(251,32,27)" fg:x="529" fg:w="1"/><text x="88.1238%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.17%)</title><rect x="87.8738%" y="309" width="0.1661%" height="15" fill="rgb(208,127,28)" fg:x="529" fg:w="1"/><text x="88.1238%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.17%)</title><rect x="87.8738%" y="293" width="0.1661%" height="15" fill="rgb(224,137,22)" fg:x="529" fg:w="1"/><text x="88.1238%" y="303.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (1 samples, 0.17%)</title><rect x="88.0399%" y="325" width="0.1661%" height="15" fill="rgb(254,70,32)" fg:x="530" fg:w="1"/><text x="88.2899%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.17%)</title><rect x="88.0399%" y="309" width="0.1661%" height="15" fill="rgb(229,75,37)" fg:x="530" fg:w="1"/><text x="88.2899%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.17%)</title><rect x="88.0399%" y="293" width="0.1661%" height="15" fill="rgb(252,64,23)" fg:x="530" fg:w="1"/><text x="88.2899%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V&gt;::new (2 samples, 0.33%)</title><rect x="88.0399%" y="389" width="0.3322%" height="15" fill="rgb(232,162,48)" fg:x="530" fg:w="2"/><text x="88.2899%" y="399.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (2 samples, 0.33%)</title><rect x="88.0399%" y="373" width="0.3322%" height="15" fill="rgb(246,160,12)" fg:x="530" fg:w="2"/><text x="88.2899%" y="383.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (2 samples, 0.33%)</title><rect x="88.0399%" y="357" width="0.3322%" height="15" fill="rgb(247,166,0)" fg:x="530" fg:w="2"/><text x="88.2899%" y="367.50"></text></g><g><title>ahash::random_state::RandomState::new (2 samples, 0.33%)</title><rect x="88.0399%" y="341" width="0.3322%" height="15" fill="rgb(249,219,21)" fg:x="530" fg:w="2"/><text x="88.2899%" y="351.50"></text></g><g><title>once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_init (1 samples, 0.17%)</title><rect x="88.2060%" y="325" width="0.1661%" height="15" fill="rgb(205,209,3)" fg:x="531" fg:w="1"/><text x="88.4560%" y="335.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (2 samples, 0.33%)</title><rect x="88.3721%" y="309" width="0.3322%" height="15" fill="rgb(243,44,1)" fg:x="532" fg:w="2"/><text x="88.6221%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.33%)</title><rect x="88.3721%" y="293" width="0.3322%" height="15" fill="rgb(206,159,16)" fg:x="532" fg:w="2"/><text x="88.6221%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.33%)</title><rect x="88.3721%" y="277" width="0.3322%" height="15" fill="rgb(244,77,30)" fg:x="532" fg:w="2"/><text x="88.6221%" y="287.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1 samples, 0.17%)</title><rect x="88.7043%" y="293" width="0.1661%" height="15" fill="rgb(218,69,12)" fg:x="534" fg:w="1"/><text x="88.9543%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1 samples, 0.17%)</title><rect x="88.7043%" y="277" width="0.1661%" height="15" fill="rgb(212,87,7)" fg:x="534" fg:w="1"/><text x="88.9543%" y="287.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1 samples, 0.17%)</title><rect x="88.7043%" y="261" width="0.1661%" height="15" fill="rgb(245,114,25)" fg:x="534" fg:w="1"/><text x="88.9543%" y="271.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (4 samples, 0.66%)</title><rect x="88.3721%" y="341" width="0.6645%" height="15" fill="rgb(210,61,42)" fg:x="532" fg:w="4"/><text x="88.6221%" y="351.50"></text></g><g><title>ahash::random_state::RandomState::new (4 samples, 0.66%)</title><rect x="88.3721%" y="325" width="0.6645%" height="15" fill="rgb(211,52,33)" fg:x="532" fg:w="4"/><text x="88.6221%" y="335.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (2 samples, 0.33%)</title><rect x="88.7043%" y="309" width="0.3322%" height="15" fill="rgb(234,58,33)" fg:x="534" fg:w="2"/><text x="88.9543%" y="319.50"></text></g><g><title>ahash::random_state::RandomState::from_keys::{{closure}} (1 samples, 0.17%)</title><rect x="88.8704%" y="293" width="0.1661%" height="15" fill="rgb(220,115,36)" fg:x="535" fg:w="1"/><text x="89.1204%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.17%)</title><rect x="88.8704%" y="277" width="0.1661%" height="15" fill="rgb(243,153,54)" fg:x="535" fg:w="1"/><text x="89.1204%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.17%)</title><rect x="88.8704%" y="261" width="0.1661%" height="15" fill="rgb(251,47,18)" fg:x="535" fg:w="1"/><text x="89.1204%" y="271.50"></text></g><g><title>revm::subroutine::SubRoutine::finalize (30 samples, 4.98%)</title><rect x="84.3854%" y="405" width="4.9834%" height="15" fill="rgb(242,102,42)" fg:x="508" fg:w="30"/><text x="84.6354%" y="415.50">revm::..</text></g><g><title>revm::subroutine::Filth::clean (6 samples, 1.00%)</title><rect x="88.3721%" y="389" width="0.9967%" height="15" fill="rgb(234,31,38)" fg:x="532" fg:w="6"/><text x="88.6221%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V&gt;::new (6 samples, 1.00%)</title><rect x="88.3721%" y="373" width="0.9967%" height="15" fill="rgb(221,117,51)" fg:x="532" fg:w="6"/><text x="88.6221%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (6 samples, 1.00%)</title><rect x="88.3721%" y="357" width="0.9967%" height="15" fill="rgb(212,20,18)" fg:x="532" fg:w="6"/><text x="88.6221%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::with_hasher_in (2 samples, 0.33%)</title><rect x="89.0365%" y="341" width="0.3322%" height="15" fill="rgb(245,133,36)" fg:x="536" fg:w="2"/><text x="89.2865%" y="351.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::finalize (41 samples, 6.81%)</title><rect x="82.7243%" y="421" width="6.8106%" height="15" fill="rgb(212,6,19)" fg:x="498" fg:w="41"/><text x="82.9743%" y="431.50">revm::evm..</text></g><g><title>revm::subroutine::SubRoutine::load_account (1 samples, 0.17%)</title><rect x="89.3688%" y="405" width="0.1661%" height="15" fill="rgb(218,1,36)" fg:x="538" fg:w="1"/><text x="89.6188%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (1 samples, 0.17%)</title><rect x="89.3688%" y="389" width="0.1661%" height="15" fill="rgb(246,84,54)" fg:x="538" fg:w="1"/><text x="89.6188%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.17%)</title><rect x="89.3688%" y="373" width="0.1661%" height="15" fill="rgb(242,110,6)" fg:x="538" fg:w="1"/><text x="89.6188%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.17%)</title><rect x="89.3688%" y="357" width="0.1661%" height="15" fill="rgb(214,47,5)" fg:x="538" fg:w="1"/><text x="89.6188%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.17%)</title><rect x="89.3688%" y="341" width="0.1661%" height="15" fill="rgb(218,159,25)" fg:x="538" fg:w="1"/><text x="89.6188%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="89.5349%" y="373" width="0.1661%" height="15" fill="rgb(215,211,28)" fg:x="539" fg:w="1"/><text x="89.7849%" y="383.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.17%)</title><rect x="89.7010%" y="325" width="0.1661%" height="15" fill="rgb(238,59,32)" fg:x="540" fg:w="1"/><text x="89.9510%" y="335.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.33%)</title><rect x="89.7010%" y="373" width="0.3322%" height="15" fill="rgb(226,82,3)" fg:x="540" fg:w="2"/><text x="89.9510%" y="383.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (2 samples, 0.33%)</title><rect x="89.7010%" y="357" width="0.3322%" height="15" fill="rgb(240,164,32)" fg:x="540" fg:w="2"/><text x="89.9510%" y="367.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (2 samples, 0.33%)</title><rect x="89.7010%" y="341" width="0.3322%" height="15" fill="rgb(232,46,7)" fg:x="540" fg:w="2"/><text x="89.9510%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="89.8671%" y="325" width="0.1661%" height="15" fill="rgb(229,129,53)" fg:x="541" fg:w="1"/><text x="90.1171%" y="335.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::inner_load_account (5 samples, 0.83%)</title><rect x="89.5349%" y="421" width="0.8306%" height="15" fill="rgb(234,188,29)" fg:x="539" fg:w="5"/><text x="89.7849%" y="431.50"></text></g><g><title>revm::subroutine::SubRoutine::load_account (5 samples, 0.83%)</title><rect x="89.5349%" y="405" width="0.8306%" height="15" fill="rgb(246,141,4)" fg:x="539" fg:w="5"/><text x="89.7849%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.83%)</title><rect x="89.5349%" y="389" width="0.8306%" height="15" fill="rgb(229,23,39)" fg:x="539" fg:w="5"/><text x="89.7849%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.33%)</title><rect x="90.0332%" y="373" width="0.3322%" height="15" fill="rgb(206,12,3)" fg:x="542" fg:w="2"/><text x="90.2832%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.33%)</title><rect x="90.0332%" y="357" width="0.3322%" height="15" fill="rgb(252,226,20)" fg:x="542" fg:w="2"/><text x="90.2832%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.33%)</title><rect x="90.0332%" y="341" width="0.3322%" height="15" fill="rgb(216,123,35)" fg:x="542" fg:w="2"/><text x="90.2832%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2 samples, 0.33%)</title><rect x="90.0332%" y="325" width="0.3322%" height="15" fill="rgb(212,68,40)" fg:x="542" fg:w="2"/><text x="90.2832%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2 samples, 0.33%)</title><rect x="90.0332%" y="309" width="0.3322%" height="15" fill="rgb(254,125,32)" fg:x="542" fg:w="2"/><text x="90.2832%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2 samples, 0.33%)</title><rect x="90.0332%" y="293" width="0.3322%" height="15" fill="rgb(253,97,22)" fg:x="542" fg:w="2"/><text x="90.2832%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.33%)</title><rect x="90.0332%" y="277" width="0.3322%" height="15" fill="rgb(241,101,14)" fg:x="542" fg:w="2"/><text x="90.2832%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 0.33%)</title><rect x="90.0332%" y="261" width="0.3322%" height="15" fill="rgb(238,103,29)" fg:x="542" fg:w="2"/><text x="90.2832%" y="271.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.33%)</title><rect x="90.0332%" y="245" width="0.3322%" height="15" fill="rgb(233,195,47)" fg:x="542" fg:w="2"/><text x="90.2832%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (2 samples, 0.33%)</title><rect x="90.0332%" y="229" width="0.3322%" height="15" fill="rgb(246,218,30)" fg:x="542" fg:w="2"/><text x="90.2832%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.33%)</title><rect x="90.0332%" y="213" width="0.3322%" height="15" fill="rgb(219,145,47)" fg:x="542" fg:w="2"/><text x="90.2832%" y="223.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.33%)</title><rect x="90.0332%" y="197" width="0.3322%" height="15" fill="rgb(243,12,26)" fg:x="542" fg:w="2"/><text x="90.2832%" y="207.50"></text></g><g><title>_int_malloc (2 samples, 0.33%)</title><rect x="90.0332%" y="181" width="0.3322%" height="15" fill="rgb(214,87,16)" fg:x="542" fg:w="2"/><text x="90.2832%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.17%)</title><rect x="90.3654%" y="357" width="0.1661%" height="15" fill="rgb(208,99,42)" fg:x="544" fg:w="1"/><text x="90.6154%" y="367.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.17%)</title><rect x="90.3654%" y="341" width="0.1661%" height="15" fill="rgb(253,99,2)" fg:x="544" fg:w="1"/><text x="90.6154%" y="351.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="90.3654%" y="325" width="0.1661%" height="15" fill="rgb(220,168,23)" fg:x="544" fg:w="1"/><text x="90.6154%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.33%)</title><rect x="90.3654%" y="373" width="0.3322%" height="15" fill="rgb(242,38,24)" fg:x="544" fg:w="2"/><text x="90.6154%" y="383.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.17%)</title><rect x="90.5316%" y="357" width="0.1661%" height="15" fill="rgb(225,182,9)" fg:x="545" fg:w="1"/><text x="90.7816%" y="367.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="90.5316%" y="341" width="0.1661%" height="15" fill="rgb(243,178,37)" fg:x="545" fg:w="1"/><text x="90.7816%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="90.5316%" y="325" width="0.1661%" height="15" fill="rgb(232,139,19)" fg:x="545" fg:w="1"/><text x="90.7816%" y="335.50"></text></g><g><title>revm::subroutine::SubRoutine::account (3 samples, 0.50%)</title><rect x="90.3654%" y="421" width="0.4983%" height="15" fill="rgb(225,201,24)" fg:x="544" fg:w="3"/><text x="90.6154%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.50%)</title><rect x="90.3654%" y="405" width="0.4983%" height="15" fill="rgb(221,47,46)" fg:x="544" fg:w="3"/><text x="90.6154%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.50%)</title><rect x="90.3654%" y="389" width="0.4983%" height="15" fill="rgb(249,23,13)" fg:x="544" fg:w="3"/><text x="90.6154%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.17%)</title><rect x="90.6977%" y="373" width="0.1661%" height="15" fill="rgb(219,9,5)" fg:x="546" fg:w="1"/><text x="90.9477%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.17%)</title><rect x="90.6977%" y="357" width="0.1661%" height="15" fill="rgb(254,171,16)" fg:x="546" fg:w="1"/><text x="90.9477%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.17%)</title><rect x="90.6977%" y="341" width="0.1661%" height="15" fill="rgb(230,171,20)" fg:x="546" fg:w="1"/><text x="90.9477%" y="351.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (517 samples, 85.88%)</title><rect x="5.1495%" y="437" width="85.8804%" height="15" fill="rgb(210,71,41)" fg:x="31" fg:w="517"/><text x="5.3995%" y="447.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact</text></g><g><title>revm::subroutine::SubRoutine::balance_sub (1 samples, 0.17%)</title><rect x="90.8638%" y="421" width="0.1661%" height="15" fill="rgb(206,173,20)" fg:x="547" fg:w="1"/><text x="91.1138%" y="431.50"></text></g><g><title>revm::subroutine::SubRoutine::log_dirty (1 samples, 0.17%)</title><rect x="90.8638%" y="405" width="0.1661%" height="15" fill="rgb(233,88,34)" fg:x="547" fg:w="1"/><text x="91.1138%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (1 samples, 0.17%)</title><rect x="90.8638%" y="389" width="0.1661%" height="15" fill="rgb(223,209,46)" fg:x="547" fg:w="1"/><text x="91.1138%" y="399.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.17%)</title><rect x="90.8638%" y="373" width="0.1661%" height="15" fill="rgb(250,43,18)" fg:x="547" fg:w="1"/><text x="91.1138%" y="383.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.17%)</title><rect x="90.8638%" y="357" width="0.1661%" height="15" fill="rgb(208,13,10)" fg:x="547" fg:w="1"/><text x="91.1138%" y="367.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="90.8638%" y="341" width="0.1661%" height="15" fill="rgb(212,200,36)" fg:x="547" fg:w="1"/><text x="91.1138%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="90.8638%" y="325" width="0.1661%" height="15" fill="rgb(225,90,30)" fg:x="547" fg:w="1"/><text x="91.1138%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.17%)</title><rect x="91.0299%" y="357" width="0.1661%" height="15" fill="rgb(236,182,39)" fg:x="548" fg:w="1"/><text x="91.2799%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.33%)</title><rect x="91.0299%" y="389" width="0.3322%" height="15" fill="rgb(212,144,35)" fg:x="548" fg:w="2"/><text x="91.2799%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.33%)</title><rect x="91.0299%" y="373" width="0.3322%" height="15" fill="rgb(228,63,44)" fg:x="548" fg:w="2"/><text x="91.2799%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="91.1960%" y="357" width="0.1661%" height="15" fill="rgb(228,109,6)" fg:x="549" fg:w="1"/><text x="91.4460%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.17%)</title><rect x="91.1960%" y="341" width="0.1661%" height="15" fill="rgb(238,117,24)" fg:x="549" fg:w="1"/><text x="91.4460%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.17%)</title><rect x="91.1960%" y="325" width="0.1661%" height="15" fill="rgb(242,26,26)" fg:x="549" fg:w="1"/><text x="91.4460%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.17%)</title><rect x="91.1960%" y="309" width="0.1661%" height="15" fill="rgb(221,92,48)" fg:x="549" fg:w="1"/><text x="91.4460%" y="319.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.17%)</title><rect x="91.1960%" y="293" width="0.1661%" height="15" fill="rgb(209,209,32)" fg:x="549" fg:w="1"/><text x="91.4460%" y="303.50"></text></g><g><title>_int_realloc (1 samples, 0.17%)</title><rect x="91.1960%" y="277" width="0.1661%" height="15" fill="rgb(221,70,22)" fg:x="549" fg:w="1"/><text x="91.4460%" y="287.50"></text></g><g><title>_int_free (1 samples, 0.17%)</title><rect x="91.1960%" y="261" width="0.1661%" height="15" fill="rgb(248,145,5)" fg:x="549" fg:w="1"/><text x="91.4460%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.50%)</title><rect x="91.0299%" y="405" width="0.4983%" height="15" fill="rgb(226,116,26)" fg:x="548" fg:w="3"/><text x="91.2799%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.17%)</title><rect x="91.3621%" y="389" width="0.1661%" height="15" fill="rgb(244,5,17)" fg:x="550" fg:w="1"/><text x="91.6121%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.17%)</title><rect x="91.5282%" y="357" width="0.1661%" height="15" fill="rgb(252,159,33)" fg:x="551" fg:w="1"/><text x="91.7782%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.17%)</title><rect x="91.5282%" y="341" width="0.1661%" height="15" fill="rgb(206,71,0)" fg:x="551" fg:w="1"/><text x="91.7782%" y="351.50"></text></g><g><title>_int_free (1 samples, 0.17%)</title><rect x="91.5282%" y="325" width="0.1661%" height="15" fill="rgb(233,118,54)" fg:x="551" fg:w="1"/><text x="91.7782%" y="335.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.17%)</title><rect x="91.5282%" y="309" width="0.1661%" height="15" fill="rgb(234,83,48)" fg:x="551" fg:w="1"/><text x="91.7782%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;primitive_types::H160&gt;&gt; (2 samples, 0.33%)</title><rect x="91.5282%" y="405" width="0.3322%" height="15" fill="rgb(228,3,54)" fg:x="551" fg:w="2"/><text x="91.7782%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;primitive_types::H160&gt;&gt; (2 samples, 0.33%)</title><rect x="91.5282%" y="389" width="0.3322%" height="15" fill="rgb(226,155,13)" fg:x="551" fg:w="2"/><text x="91.7782%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.33%)</title><rect x="91.5282%" y="373" width="0.3322%" height="15" fill="rgb(241,28,37)" fg:x="551" fg:w="2"/><text x="91.7782%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.17%)</title><rect x="91.6944%" y="357" width="0.1661%" height="15" fill="rgb(233,93,10)" fg:x="552" fg:w="1"/><text x="91.9444%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.17%)</title><rect x="91.6944%" y="341" width="0.1661%" height="15" fill="rgb(225,113,19)" fg:x="552" fg:w="1"/><text x="91.9444%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.17%)</title><rect x="91.6944%" y="325" width="0.1661%" height="15" fill="rgb(241,2,18)" fg:x="552" fg:w="1"/><text x="91.9444%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.17%)</title><rect x="91.6944%" y="309" width="0.1661%" height="15" fill="rgb(228,207,21)" fg:x="552" fg:w="1"/><text x="91.9444%" y="319.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.33%)</title><rect x="91.8605%" y="341" width="0.3322%" height="15" fill="rgb(213,211,35)" fg:x="553" fg:w="2"/><text x="92.1105%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.33%)</title><rect x="91.8605%" y="325" width="0.3322%" height="15" fill="rgb(209,83,10)" fg:x="553" fg:w="2"/><text x="92.1105%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="92.0266%" y="309" width="0.1661%" height="15" fill="rgb(209,164,1)" fg:x="554" fg:w="1"/><text x="92.2766%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.83%)</title><rect x="92.6910%" y="293" width="0.8306%" height="15" fill="rgb(213,184,43)" fg:x="558" fg:w="5"/><text x="92.9410%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13 samples, 2.16%)</title><rect x="91.8605%" y="373" width="2.1595%" height="15" fill="rgb(231,61,34)" fg:x="553" fg:w="13"/><text x="92.1105%" y="383.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 2.16%)</title><rect x="91.8605%" y="357" width="2.1595%" height="15" fill="rgb(235,75,3)" fg:x="553" fg:w="13"/><text x="92.1105%" y="367.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (11 samples, 1.83%)</title><rect x="92.1927%" y="341" width="1.8272%" height="15" fill="rgb(220,106,47)" fg:x="555" fg:w="11"/><text x="92.4427%" y="351.50">c..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (11 samples, 1.83%)</title><rect x="92.1927%" y="325" width="1.8272%" height="15" fill="rgb(210,196,33)" fg:x="555" fg:w="11"/><text x="92.4427%" y="335.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 1.50%)</title><rect x="92.5249%" y="309" width="1.4950%" height="15" fill="rgb(229,154,42)" fg:x="557" fg:w="9"/><text x="92.7749%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.50%)</title><rect x="93.5216%" y="293" width="0.4983%" height="15" fill="rgb(228,114,26)" fg:x="563" fg:w="3"/><text x="93.7716%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.50%)</title><rect x="93.5216%" y="277" width="0.4983%" height="15" fill="rgb(208,144,1)" fg:x="563" fg:w="3"/><text x="93.7716%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.50%)</title><rect x="93.5216%" y="261" width="0.4983%" height="15" fill="rgb(239,112,37)" fg:x="563" fg:w="3"/><text x="93.7716%" y="271.50"></text></g><g><title>core::ptr::write (3 samples, 0.50%)</title><rect x="93.5216%" y="245" width="0.4983%" height="15" fill="rgb(210,96,50)" fg:x="563" fg:w="3"/><text x="93.7716%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.50%)</title><rect x="93.5216%" y="229" width="0.4983%" height="15" fill="rgb(222,178,2)" fg:x="563" fg:w="3"/><text x="93.7716%" y="239.50"></text></g><g><title>core::mem::swap (1 samples, 0.17%)</title><rect x="94.0199%" y="293" width="0.1661%" height="15" fill="rgb(226,74,18)" fg:x="566" fg:w="1"/><text x="94.2699%" y="303.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.17%)</title><rect x="94.0199%" y="277" width="0.1661%" height="15" fill="rgb(225,67,54)" fg:x="566" fg:w="1"/><text x="94.2699%" y="287.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16 samples, 2.66%)</title><rect x="91.8605%" y="389" width="2.6578%" height="15" fill="rgb(251,92,32)" fg:x="553" fg:w="16"/><text x="92.1105%" y="399.50">&lt;h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3 samples, 0.50%)</title><rect x="94.0199%" y="373" width="0.4983%" height="15" fill="rgb(228,149,22)" fg:x="566" fg:w="3"/><text x="94.2699%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.50%)</title><rect x="94.0199%" y="357" width="0.4983%" height="15" fill="rgb(243,54,13)" fg:x="566" fg:w="3"/><text x="94.2699%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.50%)</title><rect x="94.0199%" y="341" width="0.4983%" height="15" fill="rgb(243,180,28)" fg:x="566" fg:w="3"/><text x="94.2699%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (3 samples, 0.50%)</title><rect x="94.0199%" y="325" width="0.4983%" height="15" fill="rgb(208,167,24)" fg:x="566" fg:w="3"/><text x="94.2699%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (3 samples, 0.50%)</title><rect x="94.0199%" y="309" width="0.4983%" height="15" fill="rgb(245,73,45)" fg:x="566" fg:w="3"/><text x="94.2699%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2 samples, 0.33%)</title><rect x="94.1860%" y="293" width="0.3322%" height="15" fill="rgb(237,203,48)" fg:x="567" fg:w="2"/><text x="94.4360%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.33%)</title><rect x="94.1860%" y="277" width="0.3322%" height="15" fill="rgb(211,197,16)" fg:x="567" fg:w="2"/><text x="94.4360%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 0.33%)</title><rect x="94.1860%" y="261" width="0.3322%" height="15" fill="rgb(243,99,51)" fg:x="567" fg:w="2"/><text x="94.4360%" y="271.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.33%)</title><rect x="94.1860%" y="245" width="0.3322%" height="15" fill="rgb(215,123,29)" fg:x="567" fg:w="2"/><text x="94.4360%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (2 samples, 0.33%)</title><rect x="94.1860%" y="229" width="0.3322%" height="15" fill="rgb(239,186,37)" fg:x="567" fg:w="2"/><text x="94.4360%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.33%)</title><rect x="94.1860%" y="213" width="0.3322%" height="15" fill="rgb(252,136,39)" fg:x="567" fg:w="2"/><text x="94.4360%" y="223.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.33%)</title><rect x="94.1860%" y="197" width="0.3322%" height="15" fill="rgb(223,213,32)" fg:x="567" fg:w="2"/><text x="94.4360%" y="207.50"></text></g><g><title>_int_malloc (2 samples, 0.33%)</title><rect x="94.1860%" y="181" width="0.3322%" height="15" fill="rgb(233,115,5)" fg:x="567" fg:w="2"/><text x="94.4360%" y="191.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (1 samples, 0.17%)</title><rect x="94.5183%" y="357" width="0.1661%" height="15" fill="rgb(207,226,44)" fg:x="569" fg:w="1"/><text x="94.7683%" y="367.50"></text></g><g><title>ahash::random_state::RandomState::new (1 samples, 0.17%)</title><rect x="94.5183%" y="341" width="0.1661%" height="15" fill="rgb(208,126,0)" fg:x="569" fg:w="1"/><text x="94.7683%" y="351.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (1 samples, 0.17%)</title><rect x="94.5183%" y="325" width="0.1661%" height="15" fill="rgb(244,66,21)" fg:x="569" fg:w="1"/><text x="94.7683%" y="335.50"></text></g><g><title>ahash::random_state::RandomState::from_keys::{{closure}} (1 samples, 0.17%)</title><rect x="94.5183%" y="309" width="0.1661%" height="15" fill="rgb(222,97,12)" fg:x="569" fg:w="1"/><text x="94.7683%" y="319.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.17%)</title><rect x="94.5183%" y="293" width="0.1661%" height="15" fill="rgb(219,213,19)" fg:x="569" fg:w="1"/><text x="94.7683%" y="303.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.17%)</title><rect x="94.5183%" y="277" width="0.1661%" height="15" fill="rgb(252,169,30)" fg:x="569" fg:w="1"/><text x="94.7683%" y="287.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="94.5183%" y="261" width="0.1661%" height="15" fill="rgb(206,32,51)" fg:x="569" fg:w="1"/><text x="94.7683%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.50%)</title><rect x="95.0166%" y="261" width="0.4983%" height="15" fill="rgb(250,172,42)" fg:x="572" fg:w="3"/><text x="95.2666%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.17%)</title><rect x="95.5150%" y="197" width="0.1661%" height="15" fill="rgb(209,34,43)" fg:x="575" fg:w="1"/><text x="95.7650%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.17%)</title><rect x="95.5150%" y="181" width="0.1661%" height="15" fill="rgb(223,11,35)" fg:x="575" fg:w="1"/><text x="95.7650%" y="191.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (1 samples, 0.17%)</title><rect x="95.5150%" y="165" width="0.1661%" height="15" fill="rgb(251,219,26)" fg:x="575" fg:w="1"/><text x="95.7650%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="95.5150%" y="149" width="0.1661%" height="15" fill="rgb(231,119,3)" fg:x="575" fg:w="1"/><text x="95.7650%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.17%)</title><rect x="95.5150%" y="133" width="0.1661%" height="15" fill="rgb(216,97,11)" fg:x="575" fg:w="1"/><text x="95.7650%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.17%)</title><rect x="95.5150%" y="117" width="0.1661%" height="15" fill="rgb(223,59,9)" fg:x="575" fg:w="1"/><text x="95.7650%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 0.17%)</title><rect x="95.5150%" y="101" width="0.1661%" height="15" fill="rgb(233,93,31)" fg:x="575" fg:w="1"/><text x="95.7650%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.33%)</title><rect x="95.5150%" y="245" width="0.3322%" height="15" fill="rgb(239,81,33)" fg:x="575" fg:w="2"/><text x="95.7650%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.33%)</title><rect x="95.5150%" y="229" width="0.3322%" height="15" fill="rgb(213,120,34)" fg:x="575" fg:w="2"/><text x="95.7650%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.33%)</title><rect x="95.5150%" y="213" width="0.3322%" height="15" fill="rgb(243,49,53)" fg:x="575" fg:w="2"/><text x="95.7650%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.17%)</title><rect x="95.6811%" y="197" width="0.1661%" height="15" fill="rgb(247,216,33)" fg:x="576" fg:w="1"/><text x="95.9311%" y="207.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter::{{closure}} (10 samples, 1.66%)</title><rect x="94.6844%" y="277" width="1.6611%" height="15" fill="rgb(226,26,14)" fg:x="570" fg:w="10"/><text x="94.9344%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.83%)</title><rect x="95.5150%" y="261" width="0.8306%" height="15" fill="rgb(215,49,53)" fg:x="575" fg:w="5"/><text x="95.7650%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.50%)</title><rect x="95.8472%" y="245" width="0.4983%" height="15" fill="rgb(245,162,40)" fg:x="577" fg:w="3"/><text x="96.0972%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.50%)</title><rect x="95.8472%" y="229" width="0.4983%" height="15" fill="rgb(229,68,17)" fg:x="577" fg:w="3"/><text x="96.0972%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.50%)</title><rect x="95.8472%" y="213" width="0.4983%" height="15" fill="rgb(213,182,10)" fg:x="577" fg:w="3"/><text x="96.0972%" y="223.50"></text></g><g><title>core::ptr::write (3 samples, 0.50%)</title><rect x="95.8472%" y="197" width="0.4983%" height="15" fill="rgb(245,125,30)" fg:x="577" fg:w="3"/><text x="96.0972%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.50%)</title><rect x="95.8472%" y="181" width="0.4983%" height="15" fill="rgb(232,202,2)" fg:x="577" fg:w="3"/><text x="96.0972%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (13 samples, 2.16%)</title><rect x="94.6844%" y="293" width="2.1595%" height="15" fill="rgb(237,140,51)" fg:x="570" fg:w="13"/><text x="94.9344%" y="303.50">c..</text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.50%)</title><rect x="96.3455%" y="277" width="0.4983%" height="15" fill="rgb(236,157,25)" fg:x="580" fg:w="3"/><text x="96.5955%" y="287.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.17%)</title><rect x="96.8439%" y="245" width="0.1661%" height="15" fill="rgb(219,209,0)" fg:x="583" fg:w="1"/><text x="97.0939%" y="255.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (1 samples, 0.17%)</title><rect x="96.8439%" y="229" width="0.1661%" height="15" fill="rgb(240,116,54)" fg:x="583" fg:w="1"/><text x="97.0939%" y="239.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="97.0100%" y="165" width="0.1661%" height="15" fill="rgb(216,10,36)" fg:x="584" fg:w="1"/><text x="97.2600%" y="175.50"></text></g><g><title>&lt;revm::models::AccountInfo as core::default::Default&gt;::default (3 samples, 0.50%)</title><rect x="96.8439%" y="277" width="0.4983%" height="15" fill="rgb(222,72,44)" fg:x="583" fg:w="3"/><text x="97.0939%" y="287.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::new (3 samples, 0.50%)</title><rect x="96.8439%" y="261" width="0.4983%" height="15" fill="rgb(232,159,9)" fg:x="583" fg:w="3"/><text x="97.0939%" y="271.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (2 samples, 0.33%)</title><rect x="97.0100%" y="245" width="0.3322%" height="15" fill="rgb(210,39,32)" fg:x="584" fg:w="2"/><text x="97.2600%" y="255.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.33%)</title><rect x="97.0100%" y="229" width="0.3322%" height="15" fill="rgb(216,194,45)" fg:x="584" fg:w="2"/><text x="97.2600%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.33%)</title><rect x="97.0100%" y="213" width="0.3322%" height="15" fill="rgb(218,18,35)" fg:x="584" fg:w="2"/><text x="97.2600%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.33%)</title><rect x="97.0100%" y="197" width="0.3322%" height="15" fill="rgb(207,83,51)" fg:x="584" fg:w="2"/><text x="97.2600%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.33%)</title><rect x="97.0100%" y="181" width="0.3322%" height="15" fill="rgb(225,63,43)" fg:x="584" fg:w="2"/><text x="97.2600%" y="191.50"></text></g><g><title>__rust_alloc (1 samples, 0.17%)</title><rect x="97.1761%" y="165" width="0.1661%" height="15" fill="rgb(207,57,36)" fg:x="585" fg:w="1"/><text x="97.4261%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.33%)</title><rect x="97.3422%" y="261" width="0.3322%" height="15" fill="rgb(216,99,33)" fg:x="586" fg:w="2"/><text x="97.5922%" y="271.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (2 samples, 0.33%)</title><rect x="97.6744%" y="197" width="0.3322%" height="15" fill="rgb(225,42,16)" fg:x="588" fg:w="2"/><text x="97.9244%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.17%)</title><rect x="97.8405%" y="181" width="0.1661%" height="15" fill="rgb(220,201,45)" fg:x="589" fg:w="1"/><text x="98.0905%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.17%)</title><rect x="97.8405%" y="165" width="0.1661%" height="15" fill="rgb(225,33,4)" fg:x="589" fg:w="1"/><text x="98.0905%" y="175.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (3 samples, 0.50%)</title><rect x="97.6744%" y="229" width="0.4983%" height="15" fill="rgb(224,33,50)" fg:x="588" fg:w="3"/><text x="97.9244%" y="239.50"></text></g><g><title>ahash::random_state::RandomState::new (3 samples, 0.50%)</title><rect x="97.6744%" y="213" width="0.4983%" height="15" fill="rgb(246,198,51)" fg:x="588" fg:w="3"/><text x="97.9244%" y="223.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (1 samples, 0.17%)</title><rect x="98.0066%" y="197" width="0.1661%" height="15" fill="rgb(205,22,4)" fg:x="590" fg:w="1"/><text x="98.2566%" y="207.50"></text></g><g><title>ahash::random_state::RandomState::from_keys::{{closure}} (1 samples, 0.17%)</title><rect x="98.0066%" y="181" width="0.1661%" height="15" fill="rgb(206,3,8)" fg:x="590" fg:w="1"/><text x="98.2566%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.17%)</title><rect x="98.0066%" y="165" width="0.1661%" height="15" fill="rgb(251,23,15)" fg:x="590" fg:w="1"/><text x="98.2566%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.17%)</title><rect x="98.0066%" y="149" width="0.1661%" height="15" fill="rgb(252,88,28)" fg:x="590" fg:w="1"/><text x="98.2566%" y="159.50"></text></g><g><title>&lt;revm::subroutine::Account as core::convert::From&lt;revm::models::AccountInfo&gt;&gt;::from (6 samples, 1.00%)</title><rect x="97.3422%" y="277" width="0.9967%" height="15" fill="rgb(212,127,14)" fg:x="586" fg:w="6"/><text x="97.5922%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V&gt;::new (4 samples, 0.66%)</title><rect x="97.6744%" y="261" width="0.6645%" height="15" fill="rgb(247,145,37)" fg:x="588" fg:w="4"/><text x="97.9244%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (4 samples, 0.66%)</title><rect x="97.6744%" y="245" width="0.6645%" height="15" fill="rgb(209,117,53)" fg:x="588" fg:w="4"/><text x="97.9244%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::with_hasher_in (1 samples, 0.17%)</title><rect x="98.1728%" y="229" width="0.1661%" height="15" fill="rgb(212,90,42)" fg:x="591" fg:w="1"/><text x="98.4228%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (23 samples, 3.82%)</title><rect x="94.6844%" y="357" width="3.8206%" height="15" fill="rgb(218,164,37)" fg:x="570" fg:w="23"/><text x="94.9344%" y="367.50">core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 3.82%)</title><rect x="94.6844%" y="341" width="3.8206%" height="15" fill="rgb(246,65,34)" fg:x="570" fg:w="23"/><text x="94.9344%" y="351.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (23 samples, 3.82%)</title><rect x="94.6844%" y="325" width="3.8206%" height="15" fill="rgb(231,100,33)" fg:x="570" fg:w="23"/><text x="94.9344%" y="335.50">core..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (23 samples, 3.82%)</title><rect x="94.6844%" y="309" width="3.8206%" height="15" fill="rgb(228,126,14)" fg:x="570" fg:w="23"/><text x="94.9344%" y="319.50">core..</text></g><g><title>revm::subroutine::SubRoutine::load_precompiles_default::{{closure}} (10 samples, 1.66%)</title><rect x="96.8439%" y="293" width="1.6611%" height="15" fill="rgb(215,173,21)" fg:x="583" fg:w="10"/><text x="97.0939%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="98.3389%" y="277" width="0.1661%" height="15" fill="rgb(210,6,40)" fg:x="592" fg:w="1"/><text x="98.5889%" y="287.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::new (46 samples, 7.64%)</title><rect x="91.0299%" y="421" width="7.6412%" height="15" fill="rgb(212,48,18)" fg:x="548" fg:w="46"/><text x="91.2799%" y="431.50">revm::evm_..</text></g><g><title>revm::subroutine::SubRoutine::load_precompiles_default (41 samples, 6.81%)</title><rect x="91.8605%" y="405" width="6.8106%" height="15" fill="rgb(230,214,11)" fg:x="553" fg:w="41"/><text x="92.1105%" y="415.50">revm::sub..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (25 samples, 4.15%)</title><rect x="94.5183%" y="389" width="4.1528%" height="15" fill="rgb(254,105,39)" fg:x="569" fg:w="25"/><text x="94.7683%" y="399.50">core:..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (25 samples, 4.15%)</title><rect x="94.5183%" y="373" width="4.1528%" height="15" fill="rgb(245,158,5)" fg:x="569" fg:w="25"/><text x="94.7683%" y="383.50">&lt;hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::with_capacity_and_hasher_in (1 samples, 0.17%)</title><rect x="98.5050%" y="357" width="0.1661%" height="15" fill="rgb(249,208,11)" fg:x="593" fg:w="1"/><text x="98.7550%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.17%)</title><rect x="98.5050%" y="341" width="0.1661%" height="15" fill="rgb(210,39,28)" fg:x="593" fg:w="1"/><text x="98.7550%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::fallible_with_capacity (1 samples, 0.17%)</title><rect x="98.5050%" y="325" width="0.1661%" height="15" fill="rgb(211,56,53)" fg:x="593" fg:w="1"/><text x="98.7550%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.17%)</title><rect x="98.5050%" y="309" width="0.1661%" height="15" fill="rgb(226,201,30)" fg:x="593" fg:w="1"/><text x="98.7550%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.17%)</title><rect x="98.5050%" y="293" width="0.1661%" height="15" fill="rgb(239,101,34)" fg:x="593" fg:w="1"/><text x="98.7550%" y="303.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.17%)</title><rect x="98.5050%" y="277" width="0.1661%" height="15" fill="rgb(226,209,5)" fg:x="593" fg:w="1"/><text x="98.7550%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (1 samples, 0.17%)</title><rect x="98.5050%" y="261" width="0.1661%" height="15" fill="rgb(250,105,47)" fg:x="593" fg:w="1"/><text x="98.7550%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.17%)</title><rect x="98.5050%" y="245" width="0.1661%" height="15" fill="rgb(230,72,3)" fg:x="593" fg:w="1"/><text x="98.7550%" y="255.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="98.5050%" y="229" width="0.1661%" height="15" fill="rgb(232,218,39)" fg:x="593" fg:w="1"/><text x="98.7550%" y="239.50"></text></g><g><title>_int_malloc (1 samples, 0.17%)</title><rect x="98.5050%" y="213" width="0.1661%" height="15" fill="rgb(248,166,6)" fg:x="593" fg:w="1"/><text x="98.7550%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.33%)</title><rect x="98.8372%" y="389" width="0.3322%" height="15" fill="rgb(247,89,20)" fg:x="595" fg:w="2"/><text x="99.0872%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.33%)</title><rect x="98.8372%" y="373" width="0.3322%" height="15" fill="rgb(248,130,54)" fg:x="595" fg:w="2"/><text x="99.0872%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.33%)</title><rect x="98.8372%" y="357" width="0.3322%" height="15" fill="rgb(234,196,4)" fg:x="595" fg:w="2"/><text x="99.0872%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.33%)</title><rect x="98.8372%" y="341" width="0.3322%" height="15" fill="rgb(250,143,31)" fg:x="595" fg:w="2"/><text x="99.0872%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.33%)</title><rect x="98.8372%" y="325" width="0.3322%" height="15" fill="rgb(211,110,34)" fg:x="595" fg:w="2"/><text x="99.0872%" y="335.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.33%)</title><rect x="98.8372%" y="309" width="0.3322%" height="15" fill="rgb(215,124,48)" fg:x="595" fg:w="2"/><text x="99.0872%" y="319.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.33%)</title><rect x="98.8372%" y="293" width="0.3322%" height="15" fill="rgb(216,46,13)" fg:x="595" fg:w="2"/><text x="99.0872%" y="303.50"></text></g><g><title>_int_realloc (2 samples, 0.33%)</title><rect x="98.8372%" y="277" width="0.3322%" height="15" fill="rgb(205,184,25)" fg:x="595" fg:w="2"/><text x="99.0872%" y="287.50"></text></g><g><title>_int_malloc (2 samples, 0.33%)</title><rect x="98.8372%" y="261" width="0.3322%" height="15" fill="rgb(228,1,10)" fg:x="595" fg:w="2"/><text x="99.0872%" y="271.50"></text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (567 samples, 94.19%)</title><rect x="5.1495%" y="453" width="94.1860%" height="15" fill="rgb(213,116,27)" fg:x="31" fg:w="567"/><text x="5.3995%" y="463.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>revm::evm::evm_inner (50 samples, 8.31%)</title><rect x="91.0299%" y="437" width="8.3056%" height="15" fill="rgb(241,95,50)" fg:x="548" fg:w="50"/><text x="91.2799%" y="447.50">revm::evm::e..</text></g><g><title>revm_precompiles::Precompiles::new (4 samples, 0.66%)</title><rect x="98.6711%" y="421" width="0.6645%" height="15" fill="rgb(238,48,32)" fg:x="594" fg:w="4"/><text x="98.9211%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.50%)</title><rect x="98.8372%" y="405" width="0.4983%" height="15" fill="rgb(235,113,49)" fg:x="595" fg:w="3"/><text x="99.0872%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.17%)</title><rect x="99.1694%" y="389" width="0.1661%" height="15" fill="rgb(205,127,43)" fg:x="597" fg:w="1"/><text x="99.4194%" y="399.50"></text></g><g><title>__libc_start_main (572 samples, 95.02%)</title><rect x="4.8173%" y="709" width="95.0166%" height="15" fill="rgb(250,162,2)" fg:x="29" fg:w="572"/><text x="5.0673%" y="719.50">__libc_start_main</text></g><g><title>main (572 samples, 95.02%)</title><rect x="4.8173%" y="693" width="95.0166%" height="15" fill="rgb(220,13,41)" fg:x="29" fg:w="572"/><text x="5.0673%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (572 samples, 95.02%)</title><rect x="4.8173%" y="677" width="95.0166%" height="15" fill="rgb(249,221,25)" fg:x="29" fg:w="572"/><text x="5.0673%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (572 samples, 95.02%)</title><rect x="4.8173%" y="661" width="95.0166%" height="15" fill="rgb(215,208,19)" fg:x="29" fg:w="572"/><text x="5.0673%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (572 samples, 95.02%)</title><rect x="4.8173%" y="645" width="95.0166%" height="15" fill="rgb(236,175,2)" fg:x="29" fg:w="572"/><text x="5.0673%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (572 samples, 95.02%)</title><rect x="4.8173%" y="629" width="95.0166%" height="15" fill="rgb(241,52,2)" fg:x="29" fg:w="572"/><text x="5.0673%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (572 samples, 95.02%)</title><rect x="4.8173%" y="613" width="95.0166%" height="15" fill="rgb(248,140,14)" fg:x="29" fg:w="572"/><text x="5.0673%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (572 samples, 95.02%)</title><rect x="4.8173%" y="597" width="95.0166%" height="15" fill="rgb(253,22,42)" fg:x="29" fg:w="572"/><text x="5.0673%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (572 samples, 95.02%)</title><rect x="4.8173%" y="581" width="95.0166%" height="15" fill="rgb(234,61,47)" fg:x="29" fg:w="572"/><text x="5.0673%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (572 samples, 95.02%)</title><rect x="4.8173%" y="565" width="95.0166%" height="15" fill="rgb(208,226,15)" fg:x="29" fg:w="572"/><text x="5.0673%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (572 samples, 95.02%)</title><rect x="4.8173%" y="549" width="95.0166%" height="15" fill="rgb(217,221,4)" fg:x="29" fg:w="572"/><text x="5.0673%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (572 samples, 95.02%)</title><rect x="4.8173%" y="533" width="95.0166%" height="15" fill="rgb(212,174,34)" fg:x="29" fg:w="572"/><text x="5.0673%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (572 samples, 95.02%)</title><rect x="4.8173%" y="517" width="95.0166%" height="15" fill="rgb(253,83,4)" fg:x="29" fg:w="572"/><text x="5.0673%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (572 samples, 95.02%)</title><rect x="4.8173%" y="501" width="95.0166%" height="15" fill="rgb(250,195,49)" fg:x="29" fg:w="572"/><text x="5.0673%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>revm_test::main (572 samples, 95.02%)</title><rect x="4.8173%" y="485" width="95.0166%" height="15" fill="rgb(241,192,25)" fg:x="29" fg:w="572"/><text x="5.0673%" y="495.50">revm_test::main</text></g><g><title>revm_test::simple_example (572 samples, 95.02%)</title><rect x="4.8173%" y="469" width="95.0166%" height="15" fill="rgb(208,124,10)" fg:x="29" fg:w="572"/><text x="5.0673%" y="479.50">revm_test::simple_example</text></g><g><title>std::time::Instant::elapsed (3 samples, 0.50%)</title><rect x="99.3355%" y="453" width="0.4983%" height="15" fill="rgb(222,33,0)" fg:x="598" fg:w="3"/><text x="99.5855%" y="463.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.50%)</title><rect x="99.3355%" y="437" width="0.4983%" height="15" fill="rgb(234,209,28)" fg:x="598" fg:w="3"/><text x="99.5855%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (3 samples, 0.50%)</title><rect x="99.3355%" y="421" width="0.4983%" height="15" fill="rgb(224,11,23)" fg:x="598" fg:w="3"/><text x="99.5855%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.50%)</title><rect x="99.3355%" y="405" width="0.4983%" height="15" fill="rgb(232,99,1)" fg:x="598" fg:w="3"/><text x="99.5855%" y="415.50"></text></g><g><title>__clock_gettime_2 (2 samples, 0.33%)</title><rect x="99.5017%" y="389" width="0.3322%" height="15" fill="rgb(237,95,45)" fg:x="599" fg:w="2"/><text x="99.7517%" y="399.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.33%)</title><rect x="99.5017%" y="373" width="0.3322%" height="15" fill="rgb(208,109,11)" fg:x="599" fg:w="2"/><text x="99.7517%" y="383.50"></text></g><g><title>all (602 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(216,190,48)" fg:x="0" fg:w="602"/><text x="0.2500%" y="767.50"></text></g><g><title>revm-test (597 samples, 99.17%)</title><rect x="0.8306%" y="741" width="99.1694%" height="15" fill="rgb(251,171,36)" fg:x="5" fg:w="597"/><text x="1.0806%" y="751.50">revm-test</text></g><g><title>_start (573 samples, 95.18%)</title><rect x="4.8173%" y="725" width="95.1827%" height="15" fill="rgb(230,62,22)" fg:x="29" fg:w="573"/><text x="5.0673%" y="735.50">_start</text></g><g><title>_dl_start (1 samples, 0.17%)</title><rect x="99.8339%" y="709" width="0.1661%" height="15" fill="rgb(225,114,35)" fg:x="601" fg:w="1"/><text x="100.0839%" y="719.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.17%)</title><rect x="99.8339%" y="693" width="0.1661%" height="15" fill="rgb(215,118,42)" fg:x="601" fg:w="1"/><text x="100.0839%" y="703.50"></text></g><g><title>dl_main (1 samples, 0.17%)</title><rect x="99.8339%" y="677" width="0.1661%" height="15" fill="rgb(243,119,21)" fg:x="601" fg:w="1"/><text x="100.0839%" y="687.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.17%)</title><rect x="99.8339%" y="661" width="0.1661%" height="15" fill="rgb(252,177,53)" fg:x="601" fg:w="1"/><text x="100.0839%" y="671.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.17%)</title><rect x="99.8339%" y="645" width="0.1661%" height="15" fill="rgb(237,209,29)" fg:x="601" fg:w="1"/><text x="100.0839%" y="655.50"></text></g><g><title>do_lookup_x (1 samples, 0.17%)</title><rect x="99.8339%" y="629" width="0.1661%" height="15" fill="rgb(212,65,23)" fg:x="601" fg:w="1"/><text x="100.0839%" y="639.50"></text></g><g><title>check_match (1 samples, 0.17%)</title><rect x="99.8339%" y="613" width="0.1661%" height="15" fill="rgb(230,222,46)" fg:x="601" fg:w="1"/><text x="100.0839%" y="623.50"></text></g><g><title>strcmp (1 samples, 0.17%)</title><rect x="99.8339%" y="597" width="0.1661%" height="15" fill="rgb(215,135,32)" fg:x="601" fg:w="1"/><text x="100.0839%" y="607.50"></text></g></svg></svg>