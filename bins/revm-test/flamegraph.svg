<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="501.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="770"><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.13%)</title><rect x="0.0000%" y="421" width="0.1299%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (1 samples, 0.13%)</title><rect x="0.1299%" y="421" width="0.1299%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3799%" y="431.50"></text></g><g><title>revm::gas::Gas::spend (1 samples, 0.13%)</title><rect x="0.2597%" y="421" width="0.1299%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.5097%" y="431.50"></text></g><g><title>revm::instructions::control::jump (1 samples, 0.13%)</title><rect x="0.3896%" y="421" width="0.1299%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.6396%" y="431.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::to_analyzed (1 samples, 0.13%)</title><rect x="0.5195%" y="421" width="0.1299%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.7695%" y="431.50"></text></g><g><title>revm::subroutine::SubRoutine::load_account (1 samples, 0.13%)</title><rect x="0.6494%" y="421" width="0.1299%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.8994%" y="431.50"></text></g><g><title>revm::subroutine::SubRoutine::load_code (1 samples, 0.13%)</title><rect x="0.7792%" y="421" width="0.1299%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="1.0292%" y="431.50"></text></g><g><title>[[heap]] (8 samples, 1.04%)</title><rect x="0.0000%" y="437" width="1.0390%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="8"/><text x="0.2500%" y="447.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.13%)</title><rect x="0.9091%" y="421" width="0.1299%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="1.1591%" y="431.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.26%)</title><rect x="1.0390%" y="421" width="0.2597%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="2"/><text x="1.2890%" y="431.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.13%)</title><rect x="1.2987%" y="421" width="0.1299%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="1.5487%" y="431.50"></text></g><g><title>_int_free (2 samples, 0.26%)</title><rect x="1.4286%" y="421" width="0.2597%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="2"/><text x="1.6786%" y="431.50"></text></g><g><title>_int_malloc (1 samples, 0.13%)</title><rect x="1.6883%" y="421" width="0.1299%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="1"/><text x="1.9383%" y="431.50"></text></g><g><title>revm::instructions::memory::mload (1 samples, 0.13%)</title><rect x="1.8182%" y="421" width="0.1299%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="1"/><text x="2.0682%" y="431.50"></text></g><g><title>revm::instructions::system::caller (1 samples, 0.13%)</title><rect x="1.9481%" y="421" width="0.1299%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="1"/><text x="2.1981%" y="431.50"></text></g><g><title>revm::instructions::system::sha3 (1 samples, 0.13%)</title><rect x="2.0779%" y="421" width="0.1299%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="1"/><text x="2.3279%" y="431.50"></text></g><g><title>revm::interpreter::Interpreter::run (1 samples, 0.13%)</title><rect x="2.2078%" y="421" width="0.1299%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="1"/><text x="2.4578%" y="431.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::new (1 samples, 0.13%)</title><rect x="2.3377%" y="421" width="0.1299%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="1"/><text x="2.5877%" y="431.50"></text></g><g><title>[[stack]] (77 samples, 10.00%)</title><rect x="1.0390%" y="437" width="10.0000%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="77"/><text x="1.2890%" y="447.50">[[stack]]</text></g><g><title>revm::interpreter::bytecode::Bytecode::to_analyzed (66 samples, 8.57%)</title><rect x="2.4675%" y="421" width="8.5714%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="66"/><text x="2.7175%" y="431.50">revm::interp..</text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="421" width="0.1299%" height="15" fill="rgb(249,33,26)" fg:x="85" fg:w="1"/><text x="11.2890%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="405" width="0.1299%" height="15" fill="rgb(235,183,28)" fg:x="85" fg:w="1"/><text x="11.2890%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="389" width="0.1299%" height="15" fill="rgb(221,5,38)" fg:x="85" fg:w="1"/><text x="11.2890%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="373" width="0.1299%" height="15" fill="rgb(247,18,42)" fg:x="85" fg:w="1"/><text x="11.2890%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="357" width="0.1299%" height="15" fill="rgb(241,131,45)" fg:x="85" fg:w="1"/><text x="11.2890%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="341" width="0.1299%" height="15" fill="rgb(249,31,29)" fg:x="85" fg:w="1"/><text x="11.2890%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="325" width="0.1299%" height="15" fill="rgb(225,111,53)" fg:x="85" fg:w="1"/><text x="11.2890%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="309" width="0.1299%" height="15" fill="rgb(238,160,17)" fg:x="85" fg:w="1"/><text x="11.2890%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="293" width="0.1299%" height="15" fill="rgb(214,148,48)" fg:x="85" fg:w="1"/><text x="11.2890%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="277" width="0.1299%" height="15" fill="rgb(232,36,49)" fg:x="85" fg:w="1"/><text x="11.2890%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="261" width="0.1299%" height="15" fill="rgb(209,103,24)" fg:x="85" fg:w="1"/><text x="11.2890%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="11.0390%" y="245" width="0.1299%" height="15" fill="rgb(229,88,8)" fg:x="85" fg:w="1"/><text x="11.2890%" y="255.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.13%)</title><rect x="11.1688%" y="421" width="0.1299%" height="15" fill="rgb(213,181,19)" fg:x="86" fg:w="1"/><text x="11.4188%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="11.2987%" y="421" width="0.1299%" height="15" fill="rgb(254,191,54)" fg:x="87" fg:w="1"/><text x="11.5487%" y="431.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.13%)</title><rect x="11.4286%" y="421" width="0.1299%" height="15" fill="rgb(241,83,37)" fg:x="88" fg:w="1"/><text x="11.6786%" y="431.50"></text></g><g><title>_int_free (2 samples, 0.26%)</title><rect x="11.5584%" y="421" width="0.2597%" height="15" fill="rgb(233,36,39)" fg:x="89" fg:w="2"/><text x="11.8084%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="11.8182%" y="421" width="0.1299%" height="15" fill="rgb(226,3,54)" fg:x="91" fg:w="1"/><text x="12.0682%" y="431.50"></text></g><g><title>malloc_consolidate (1 samples, 0.13%)</title><rect x="11.9481%" y="421" width="0.1299%" height="15" fill="rgb(245,192,40)" fg:x="92" fg:w="1"/><text x="12.1981%" y="431.50"></text></g><g><title>primitive_types::U256::div_mod (1 samples, 0.13%)</title><rect x="12.0779%" y="421" width="0.1299%" height="15" fill="rgb(238,167,29)" fg:x="93" fg:w="1"/><text x="12.3279%" y="431.50"></text></g><g><title>revm::gas::calc::sha3_cost (1 samples, 0.13%)</title><rect x="12.2078%" y="421" width="0.1299%" height="15" fill="rgb(232,182,51)" fg:x="94" fg:w="1"/><text x="12.4578%" y="431.50"></text></g><g><title>revm::instructions::arithmetic::exp (1 samples, 0.13%)</title><rect x="12.3377%" y="421" width="0.1299%" height="15" fill="rgb(231,60,39)" fg:x="95" fg:w="1"/><text x="12.5877%" y="431.50"></text></g><g><title>revm::instructions::control::jumpi (2 samples, 0.26%)</title><rect x="12.4675%" y="421" width="0.2597%" height="15" fill="rgb(208,69,12)" fg:x="96" fg:w="2"/><text x="12.7175%" y="431.50"></text></g><g><title>revm::instructions::opcode::OpInfo::get_gas (2 samples, 0.26%)</title><rect x="12.7273%" y="421" width="0.2597%" height="15" fill="rgb(235,93,37)" fg:x="98" fg:w="2"/><text x="12.9773%" y="431.50"></text></g><g><title>revm::instructions::opcode::OpInfo::is_gas_block_end (1 samples, 0.13%)</title><rect x="12.9870%" y="421" width="0.1299%" height="15" fill="rgb(213,116,39)" fg:x="100" fg:w="1"/><text x="13.2370%" y="431.50"></text></g><g><title>revm::instructions::opcode::OpInfo::is_jump (2 samples, 0.26%)</title><rect x="13.1169%" y="421" width="0.2597%" height="15" fill="rgb(222,207,29)" fg:x="101" fg:w="2"/><text x="13.3669%" y="431.50"></text></g><g><title>revm::instructions::system::codesize (1 samples, 0.13%)</title><rect x="13.3766%" y="421" width="0.1299%" height="15" fill="rgb(206,96,30)" fg:x="103" fg:w="1"/><text x="13.6266%" y="431.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::set_gas_block (1 samples, 0.13%)</title><rect x="13.5065%" y="421" width="0.1299%" height="15" fill="rgb(218,138,4)" fg:x="104" fg:w="1"/><text x="13.7565%" y="431.50"></text></g><g><title>[unknown] (21 samples, 2.73%)</title><rect x="11.0390%" y="437" width="2.7273%" height="15" fill="rgb(250,191,14)" fg:x="85" fg:w="21"/><text x="11.2890%" y="447.50">[u..</text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.13%)</title><rect x="13.6364%" y="421" width="0.1299%" height="15" fill="rgb(239,60,40)" fg:x="105" fg:w="1"/><text x="13.8864%" y="431.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.13%)</title><rect x="13.7662%" y="437" width="0.1299%" height="15" fill="rgb(206,27,48)" fg:x="106" fg:w="1"/><text x="14.0162%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(revm::instructions::Return,revm::models::TransactOut,u64,hashbrown::map::HashMap&lt;primitive_types::H160,revm::subroutine::Account&gt;,alloc::vec::Vec&lt;revm::models::Log&gt;)&gt; (1 samples, 0.13%)</title><rect x="13.8961%" y="197" width="0.1299%" height="15" fill="rgb(225,35,8)" fg:x="107" fg:w="1"/><text x="14.1461%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::subroutine::Account&gt; (1 samples, 0.13%)</title><rect x="13.8961%" y="181" width="0.1299%" height="15" fill="rgb(250,213,24)" fg:x="107" fg:w="1"/><text x="14.1461%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.39%)</title><rect x="14.9351%" y="149" width="0.3896%" height="15" fill="rgb(247,123,22)" fg:x="115" fg:w="3"/><text x="15.1851%" y="159.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.13%)</title><rect x="15.3247%" y="149" width="0.1299%" height="15" fill="rgb(231,138,38)" fg:x="118" fg:w="1"/><text x="15.5747%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::Interpreter&gt; (1 samples, 0.13%)</title><rect x="15.4545%" y="149" width="0.1299%" height="15" fill="rgb(231,145,46)" fg:x="119" fg:w="1"/><text x="15.7045%" y="159.50"></text></g><g><title>_int_free (1 samples, 0.13%)</title><rect x="15.4545%" y="133" width="0.1299%" height="15" fill="rgb(251,118,11)" fg:x="119" fg:w="1"/><text x="15.7045%" y="143.50"></text></g><g><title>revm::instructions::arithmetic::div (1 samples, 0.13%)</title><rect x="19.4805%" y="133" width="0.1299%" height="15" fill="rgb(217,147,25)" fg:x="150" fg:w="1"/><text x="19.7305%" y="143.50"></text></g><g><title>revm::instructions::arithmetic::eval_exp (1 samples, 0.13%)</title><rect x="19.6104%" y="133" width="0.1299%" height="15" fill="rgb(247,81,37)" fg:x="151" fg:w="1"/><text x="19.8604%" y="143.50"></text></g><g><title>revm::instructions::control::jump (2 samples, 0.26%)</title><rect x="19.7403%" y="133" width="0.2597%" height="15" fill="rgb(209,12,38)" fg:x="152" fg:w="2"/><text x="19.9903%" y="143.50"></text></g><g><title>revm::instructions::control::jumpi (1 samples, 0.13%)</title><rect x="20.0000%" y="133" width="0.1299%" height="15" fill="rgb(227,1,9)" fg:x="154" fg:w="1"/><text x="20.2500%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.39%)</title><rect x="20.2597%" y="101" width="0.3896%" height="15" fill="rgb(248,47,43)" fg:x="156" fg:w="3"/><text x="20.5097%" y="111.50"></text></g><g><title>__GI___libc_free (1 samples, 0.13%)</title><rect x="21.1688%" y="69" width="0.1299%" height="15" fill="rgb(221,10,30)" fg:x="163" fg:w="1"/><text x="21.4188%" y="79.50"></text></g><g><title>revm::instructions::host::sload (10 samples, 1.30%)</title><rect x="20.1299%" y="133" width="1.2987%" height="15" fill="rgb(210,229,1)" fg:x="155" fg:w="10"/><text x="20.3799%" y="143.50"></text></g><g><title>revm::subroutine::SubRoutine::sload (10 samples, 1.30%)</title><rect x="20.1299%" y="117" width="1.2987%" height="15" fill="rgb(222,148,37)" fg:x="155" fg:w="10"/><text x="20.3799%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (6 samples, 0.78%)</title><rect x="20.6494%" y="101" width="0.7792%" height="15" fill="rgb(234,67,33)" fg:x="159" fg:w="6"/><text x="20.8994%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.65%)</title><rect x="20.7792%" y="85" width="0.6494%" height="15" fill="rgb(247,98,35)" fg:x="160" fg:w="5"/><text x="21.0292%" y="95.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.13%)</title><rect x="21.2987%" y="69" width="0.1299%" height="15" fill="rgb(247,138,52)" fg:x="164" fg:w="1"/><text x="21.5487%" y="79.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 0.52%)</title><rect x="21.4286%" y="101" width="0.5195%" height="15" fill="rgb(213,79,30)" fg:x="165" fg:w="4"/><text x="21.6786%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (8 samples, 1.04%)</title><rect x="22.3377%" y="85" width="1.0390%" height="15" fill="rgb(246,177,23)" fg:x="172" fg:w="8"/><text x="22.5877%" y="95.50"></text></g><g><title>revm::instructions::host::sstore (17 samples, 2.21%)</title><rect x="21.4286%" y="133" width="2.2078%" height="15" fill="rgb(230,62,27)" fg:x="165" fg:w="17"/><text x="21.6786%" y="143.50">r..</text></g><g><title>revm::subroutine::SubRoutine::sstore (17 samples, 2.21%)</title><rect x="21.4286%" y="117" width="2.2078%" height="15" fill="rgb(216,154,8)" fg:x="165" fg:w="17"/><text x="21.6786%" y="127.50">r..</text></g><g><title>revm::subroutine::SubRoutine::sload (13 samples, 1.69%)</title><rect x="21.9481%" y="101" width="1.6883%" height="15" fill="rgb(244,35,45)" fg:x="169" fg:w="13"/><text x="22.1981%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.26%)</title><rect x="23.3766%" y="85" width="0.2597%" height="15" fill="rgb(251,115,12)" fg:x="180" fg:w="2"/><text x="23.6266%" y="95.50"></text></g><g><title>revm::instructions::memory::mload (7 samples, 0.91%)</title><rect x="23.6364%" y="133" width="0.9091%" height="15" fill="rgb(240,54,50)" fg:x="182" fg:w="7"/><text x="23.8864%" y="143.50"></text></g><g><title>primitive_types::U256::from_big_endian (3 samples, 0.39%)</title><rect x="24.1558%" y="117" width="0.3896%" height="15" fill="rgb(233,84,52)" fg:x="186" fg:w="3"/><text x="24.4058%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.26%)</title><rect x="24.2857%" y="101" width="0.2597%" height="15" fill="rgb(207,117,47)" fg:x="187" fg:w="2"/><text x="24.5357%" y="111.50"></text></g><g><title>revm::instructions::memory::mstore (2 samples, 0.26%)</title><rect x="24.5455%" y="133" width="0.2597%" height="15" fill="rgb(249,43,39)" fg:x="189" fg:w="2"/><text x="24.7955%" y="143.50"></text></g><g><title>revm::instructions::system::caller (1 samples, 0.13%)</title><rect x="24.8052%" y="133" width="0.1299%" height="15" fill="rgb(209,38,44)" fg:x="191" fg:w="1"/><text x="25.0552%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.26%)</title><rect x="24.9351%" y="117" width="0.2597%" height="15" fill="rgb(236,212,23)" fg:x="192" fg:w="2"/><text x="25.1851%" y="127.50"></text></g><g><title>primitive_types::U256::checked_mul (2 samples, 0.26%)</title><rect x="25.7143%" y="101" width="0.2597%" height="15" fill="rgb(242,79,21)" fg:x="198" fg:w="2"/><text x="25.9643%" y="111.50"></text></g><g><title>revm::instructions::system::codecopy (14 samples, 1.82%)</title><rect x="24.9351%" y="133" width="1.8182%" height="15" fill="rgb(211,96,35)" fg:x="192" fg:w="14"/><text x="25.1851%" y="143.50">r..</text></g><g><title>revm::gas::calc::verylowcopy_cost (12 samples, 1.56%)</title><rect x="25.1948%" y="117" width="1.5584%" height="15" fill="rgb(253,215,40)" fg:x="194" fg:w="12"/><text x="25.4448%" y="127.50"></text></g><g><title>primitive_types::U256::div_mod (6 samples, 0.78%)</title><rect x="25.9740%" y="101" width="0.7792%" height="15" fill="rgb(211,81,21)" fg:x="200" fg:w="6"/><text x="26.2240%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.65%)</title><rect x="26.1039%" y="85" width="0.6494%" height="15" fill="rgb(208,190,38)" fg:x="201" fg:w="5"/><text x="26.3539%" y="95.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.26%)</title><rect x="27.1429%" y="101" width="0.2597%" height="15" fill="rgb(235,213,38)" fg:x="209" fg:w="2"/><text x="27.3929%" y="111.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (46 samples, 5.97%)</title><rect x="26.7532%" y="117" width="5.9740%" height="15" fill="rgb(237,122,38)" fg:x="206" fg:w="46"/><text x="27.0032%" y="127.50">&lt;D as di..</text></g><g><title>keccak::f1600 (41 samples, 5.32%)</title><rect x="27.4026%" y="101" width="5.3247%" height="15" fill="rgb(244,218,35)" fg:x="211" fg:w="41"/><text x="27.6526%" y="111.50">keccak:..</text></g><g><title>primitive_types::U256::checked_mul (2 samples, 0.26%)</title><rect x="33.2468%" y="101" width="0.2597%" height="15" fill="rgb(240,68,47)" fg:x="256" fg:w="2"/><text x="33.4968%" y="111.50"></text></g><g><title>revm::instructions::system::sha3 (66 samples, 8.57%)</title><rect x="26.7532%" y="133" width="8.5714%" height="15" fill="rgb(210,16,53)" fg:x="206" fg:w="66"/><text x="27.0032%" y="143.50">revm::instru..</text></g><g><title>revm::gas::calc::sha3_cost (20 samples, 2.60%)</title><rect x="32.7273%" y="117" width="2.5974%" height="15" fill="rgb(235,124,12)" fg:x="252" fg:w="20"/><text x="32.9773%" y="127.50">re..</text></g><g><title>primitive_types::U256::div_mod (14 samples, 1.82%)</title><rect x="33.5065%" y="101" width="1.8182%" height="15" fill="rgb(224,169,11)" fg:x="258" fg:w="14"/><text x="33.7565%" y="111.50">p..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 1.82%)</title><rect x="33.5065%" y="85" width="1.8182%" height="15" fill="rgb(250,166,2)" fg:x="258" fg:w="14"/><text x="33.7565%" y="95.50">&lt;..</text></g><g><title>revm::interpreter::Interpreter::run (153 samples, 19.87%)</title><rect x="15.5844%" y="149" width="19.8701%" height="15" fill="rgb(242,216,29)" fg:x="120" fg:w="153"/><text x="15.8344%" y="159.50">revm::interpreter::Interpreter:..</text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (1 samples, 0.13%)</title><rect x="35.3247%" y="133" width="0.1299%" height="15" fill="rgb(230,116,27)" fg:x="272" fg:w="1"/><text x="35.5747%" y="143.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.65%)</title><rect x="59.8701%" y="117" width="0.6494%" height="15" fill="rgb(228,99,48)" fg:x="461" fg:w="5"/><text x="60.1201%" y="127.50"></text></g><g><title>_int_malloc (4 samples, 0.52%)</title><rect x="60.0000%" y="101" width="0.5195%" height="15" fill="rgb(253,11,6)" fg:x="462" fg:w="4"/><text x="60.2500%" y="111.50"></text></g><g><title>revm::instructions::opcode::OpInfo::get_gas (88 samples, 11.43%)</title><rect x="60.5195%" y="117" width="11.4286%" height="15" fill="rgb(247,143,39)" fg:x="466" fg:w="88"/><text x="60.7695%" y="127.50">revm::instruction..</text></g><g><title>revm::instructions::opcode::OpInfo::is_gas_block_end (30 samples, 3.90%)</title><rect x="71.9481%" y="117" width="3.8961%" height="15" fill="rgb(236,97,10)" fg:x="554" fg:w="30"/><text x="72.1981%" y="127.50">revm..</text></g><g><title>revm::instructions::opcode::OpInfo::is_jump (4 samples, 0.52%)</title><rect x="75.8442%" y="117" width="0.5195%" height="15" fill="rgb(233,208,19)" fg:x="584" fg:w="4"/><text x="76.0942%" y="127.50"></text></g><g><title>revm::instructions::opcode::OpInfo::is_push (15 samples, 1.95%)</title><rect x="76.3636%" y="117" width="1.9481%" height="15" fill="rgb(216,164,2)" fg:x="588" fg:w="15"/><text x="76.6136%" y="127.50">r..</text></g><g><title>__GI___libc_malloc (1 samples, 0.13%)</title><rect x="78.4416%" y="101" width="0.1299%" height="15" fill="rgb(220,129,5)" fg:x="604" fg:w="1"/><text x="78.6916%" y="111.50"></text></g><g><title>_int_malloc (1 samples, 0.13%)</title><rect x="78.4416%" y="85" width="0.1299%" height="15" fill="rgb(242,17,10)" fg:x="604" fg:w="1"/><text x="78.6916%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="78.5714%" y="101" width="0.1299%" height="15" fill="rgb(242,107,0)" fg:x="605" fg:w="1"/><text x="78.8214%" y="111.50"></text></g><g><title>_int_free (1 samples, 0.13%)</title><rect x="78.9610%" y="37" width="0.1299%" height="15" fill="rgb(251,28,31)" fg:x="608" fg:w="1"/><text x="79.2110%" y="47.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::to_checked (7 samples, 0.91%)</title><rect x="78.3117%" y="117" width="0.9091%" height="15" fill="rgb(233,223,10)" fg:x="603" fg:w="7"/><text x="78.5617%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.52%)</title><rect x="78.7013%" y="101" width="0.5195%" height="15" fill="rgb(215,21,27)" fg:x="606" fg:w="4"/><text x="78.9513%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.52%)</title><rect x="78.7013%" y="85" width="0.5195%" height="15" fill="rgb(232,23,21)" fg:x="606" fg:w="4"/><text x="78.9513%" y="95.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.26%)</title><rect x="78.9610%" y="69" width="0.2597%" height="15" fill="rgb(244,5,23)" fg:x="608" fg:w="2"/><text x="79.2110%" y="79.50"></text></g><g><title>_int_realloc (2 samples, 0.26%)</title><rect x="78.9610%" y="53" width="0.2597%" height="15" fill="rgb(226,81,46)" fg:x="608" fg:w="2"/><text x="79.2110%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.13%)</title><rect x="79.0909%" y="37" width="0.1299%" height="15" fill="rgb(247,70,30)" fg:x="609" fg:w="1"/><text x="79.3409%" y="47.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::set_gas_block (12 samples, 1.56%)</title><rect x="79.2208%" y="117" width="1.5584%" height="15" fill="rgb(212,68,19)" fg:x="610" fg:w="12"/><text x="79.4708%" y="127.50"></text></g><g><title>revm::interpreter::contract::Contract::new_with_context (355 samples, 46.10%)</title><rect x="35.4545%" y="149" width="46.1039%" height="15" fill="rgb(240,187,13)" fg:x="273" fg:w="355"/><text x="35.7045%" y="159.50">revm::interpreter::contract::Contract::new_with_context</text></g><g><title>revm::interpreter::bytecode::Bytecode::to_analyzed (355 samples, 46.10%)</title><rect x="35.4545%" y="133" width="46.1039%" height="15" fill="rgb(223,113,26)" fg:x="273" fg:w="355"/><text x="35.7045%" y="143.50">revm::interpreter::bytecode::Bytecode::to_analyzed</text></g><g><title>revm::interpreter::contract::AnalysisData::set_is_jump (6 samples, 0.78%)</title><rect x="80.7792%" y="117" width="0.7792%" height="15" fill="rgb(206,192,2)" fg:x="622" fg:w="6"/><text x="81.0292%" y="127.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (1 samples, 0.13%)</title><rect x="81.6883%" y="133" width="0.1299%" height="15" fill="rgb(241,108,4)" fg:x="629" fg:w="1"/><text x="81.9383%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="81.6883%" y="117" width="0.1299%" height="15" fill="rgb(247,173,49)" fg:x="629" fg:w="1"/><text x="81.9383%" y="127.50"></text></g><g><title>revm::subroutine::SubRoutine::balance_add (4 samples, 0.52%)</title><rect x="81.5584%" y="149" width="0.5195%" height="15" fill="rgb(224,114,35)" fg:x="628" fg:w="4"/><text x="81.8084%" y="159.50"></text></g><g><title>revm::subroutine::Filth::make_dirty (2 samples, 0.26%)</title><rect x="81.8182%" y="133" width="0.2597%" height="15" fill="rgb(245,159,27)" fg:x="630" fg:w="2"/><text x="82.0682%" y="143.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (1 samples, 0.13%)</title><rect x="82.2078%" y="133" width="0.1299%" height="15" fill="rgb(245,172,44)" fg:x="633" fg:w="1"/><text x="82.4578%" y="143.50"></text></g><g><title>revm::subroutine::SubRoutine::create_checkpoint (4 samples, 0.52%)</title><rect x="82.0779%" y="149" width="0.5195%" height="15" fill="rgb(236,23,11)" fg:x="632" fg:w="4"/><text x="82.3279%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.26%)</title><rect x="82.3377%" y="133" width="0.2597%" height="15" fill="rgb(205,117,38)" fg:x="634" fg:w="2"/><text x="82.5877%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.26%)</title><rect x="82.3377%" y="117" width="0.2597%" height="15" fill="rgb(237,72,25)" fg:x="634" fg:w="2"/><text x="82.5877%" y="127.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.13%)</title><rect x="82.4675%" y="101" width="0.1299%" height="15" fill="rgb(244,70,9)" fg:x="635" fg:w="1"/><text x="82.7175%" y="111.50"></text></g><g><title>_int_realloc (1 samples, 0.13%)</title><rect x="82.4675%" y="85" width="0.1299%" height="15" fill="rgb(217,125,39)" fg:x="635" fg:w="1"/><text x="82.7175%" y="95.50"></text></g><g><title>_int_malloc (1 samples, 0.13%)</title><rect x="82.4675%" y="69" width="0.1299%" height="15" fill="rgb(235,36,10)" fg:x="635" fg:w="1"/><text x="82.7175%" y="79.50"></text></g><g><title>bytes::bytes::shared_clone (2 samples, 0.26%)</title><rect x="82.5974%" y="133" width="0.2597%" height="15" fill="rgb(251,123,47)" fg:x="636" fg:w="2"/><text x="82.8474%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.13%)</title><rect x="82.8571%" y="117" width="0.1299%" height="15" fill="rgb(221,13,13)" fg:x="638" fg:w="1"/><text x="83.1071%" y="127.50"></text></g><g><title>revm::subroutine::SubRoutine::load_account_exist (4 samples, 0.52%)</title><rect x="82.5974%" y="149" width="0.5195%" height="15" fill="rgb(238,131,9)" fg:x="636" fg:w="4"/><text x="82.8474%" y="159.50"></text></g><g><title>revm::subroutine::SubRoutine::load_code (2 samples, 0.26%)</title><rect x="82.8571%" y="133" width="0.2597%" height="15" fill="rgb(211,50,8)" fg:x="638" fg:w="2"/><text x="83.1071%" y="143.50"></text></g><g><title>revm::subroutine::SubRoutine::load_account (1 samples, 0.13%)</title><rect x="82.9870%" y="117" width="0.1299%" height="15" fill="rgb(245,182,24)" fg:x="639" fg:w="1"/><text x="83.2370%" y="127.50"></text></g><g><title>revm::subroutine::SubRoutine::load_code (3 samples, 0.39%)</title><rect x="83.1169%" y="149" width="0.3896%" height="15" fill="rgb(242,14,37)" fg:x="640" fg:w="3"/><text x="83.3669%" y="159.50"></text></g><g><title>revm::subroutine::SubRoutine::load_account (3 samples, 0.39%)</title><rect x="83.1169%" y="133" width="0.3896%" height="15" fill="rgb(246,228,12)" fg:x="640" fg:w="3"/><text x="83.3669%" y="143.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.13%)</title><rect x="83.6364%" y="133" width="0.1299%" height="15" fill="rgb(213,55,15)" fg:x="644" fg:w="1"/><text x="83.8864%" y="143.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (1 samples, 0.13%)</title><rect x="83.6364%" y="117" width="0.1299%" height="15" fill="rgb(209,9,3)" fg:x="644" fg:w="1"/><text x="83.8864%" y="127.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.13%)</title><rect x="83.6364%" y="101" width="0.1299%" height="15" fill="rgb(230,59,30)" fg:x="644" fg:w="1"/><text x="83.8864%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.26%)</title><rect x="83.7662%" y="133" width="0.2597%" height="15" fill="rgb(209,121,21)" fg:x="645" fg:w="2"/><text x="84.0162%" y="143.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (539 samples, 70.00%)</title><rect x="14.5455%" y="165" width="70.0000%" height="15" fill="rgb(220,109,13)" fg:x="112" fg:w="539"/><text x="14.7955%" y="175.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::subroutine::SubRoutine::transfer (8 samples, 1.04%)</title><rect x="83.5065%" y="149" width="1.0390%" height="15" fill="rgb(232,18,1)" fg:x="643" fg:w="8"/><text x="83.7565%" y="159.50"></text></g><g><title>revm::subroutine::SubRoutine::load_account (4 samples, 0.52%)</title><rect x="84.0260%" y="133" width="0.5195%" height="15" fill="rgb(215,41,42)" fg:x="647" fg:w="4"/><text x="84.2760%" y="143.50"></text></g><g><title>revm::subroutine::SubRoutine::balance_add (4 samples, 0.52%)</title><rect x="84.9351%" y="149" width="0.5195%" height="15" fill="rgb(224,123,36)" fg:x="654" fg:w="4"/><text x="85.1851%" y="159.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (1 samples, 0.13%)</title><rect x="86.3636%" y="133" width="0.1299%" height="15" fill="rgb(240,125,3)" fg:x="665" fg:w="1"/><text x="86.6136%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.65%)</title><rect x="86.4935%" y="133" width="0.6494%" height="15" fill="rgb(205,98,50)" fg:x="666" fg:w="5"/><text x="86.7435%" y="143.50"></text></g><g><title>_int_free (4 samples, 0.52%)</title><rect x="87.1429%" y="133" width="0.5195%" height="15" fill="rgb(205,185,37)" fg:x="671" fg:w="4"/><text x="87.3929%" y="143.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (1 samples, 0.13%)</title><rect x="87.6623%" y="133" width="0.1299%" height="15" fill="rgb(238,207,15)" fg:x="675" fg:w="1"/><text x="87.9123%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[hashbrown::map::HashMap&lt;primitive_types::H160,revm::subroutine::ChangeLog&gt;]&gt; (1 samples, 0.13%)</title><rect x="87.7922%" y="133" width="0.1299%" height="15" fill="rgb(213,199,42)" fg:x="676" fg:w="1"/><text x="88.0422%" y="143.50"></text></g><g><title>__GI___libc_free (1 samples, 0.13%)</title><rect x="87.7922%" y="117" width="0.1299%" height="15" fill="rgb(235,201,11)" fg:x="676" fg:w="1"/><text x="88.0422%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.39%)</title><rect x="87.9221%" y="133" width="0.3896%" height="15" fill="rgb(207,46,11)" fg:x="677" fg:w="3"/><text x="88.1721%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.26%)</title><rect x="88.0519%" y="117" width="0.2597%" height="15" fill="rgb(241,35,35)" fg:x="678" fg:w="2"/><text x="88.3019%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.26%)</title><rect x="88.0519%" y="101" width="0.2597%" height="15" fill="rgb(243,32,47)" fg:x="678" fg:w="2"/><text x="88.3019%" y="111.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.26%)</title><rect x="88.0519%" y="85" width="0.2597%" height="15" fill="rgb(247,202,23)" fg:x="678" fg:w="2"/><text x="88.3019%" y="95.50"></text></g><g><title>_int_malloc (2 samples, 0.26%)</title><rect x="88.0519%" y="69" width="0.2597%" height="15" fill="rgb(219,102,11)" fg:x="678" fg:w="2"/><text x="88.3019%" y="79.50"></text></g><g><title>malloc_consolidate (1 samples, 0.13%)</title><rect x="88.1818%" y="53" width="0.1299%" height="15" fill="rgb(243,110,44)" fg:x="679" fg:w="1"/><text x="88.4318%" y="63.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (1 samples, 0.13%)</title><rect x="88.5714%" y="117" width="0.1299%" height="15" fill="rgb(222,74,54)" fg:x="682" fg:w="1"/><text x="88.8214%" y="127.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::get_fixed_seeds (1 samples, 0.13%)</title><rect x="88.7013%" y="117" width="0.1299%" height="15" fill="rgb(216,99,12)" fg:x="683" fg:w="1"/><text x="88.9513%" y="127.50"></text></g><g><title>revm::subroutine::SubRoutine::finalize (27 samples, 3.51%)</title><rect x="85.4545%" y="149" width="3.5065%" height="15" fill="rgb(226,22,26)" fg:x="658" fg:w="27"/><text x="85.7045%" y="159.50">rev..</text></g><g><title>revm::subroutine::Filth::clean (5 samples, 0.65%)</title><rect x="88.3117%" y="133" width="0.6494%" height="15" fill="rgb(217,163,10)" fg:x="680" fg:w="5"/><text x="88.5617%" y="143.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (1 samples, 0.13%)</title><rect x="88.8312%" y="117" width="0.1299%" height="15" fill="rgb(213,25,53)" fg:x="684" fg:w="1"/><text x="89.0812%" y="127.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::finalize (35 samples, 4.55%)</title><rect x="84.5455%" y="165" width="4.5455%" height="15" fill="rgb(252,105,26)" fg:x="651" fg:w="35"/><text x="84.7955%" y="175.50">revm:..</text></g><g><title>revm::subroutine::SubRoutine::load_account (1 samples, 0.13%)</title><rect x="88.9610%" y="149" width="0.1299%" height="15" fill="rgb(220,39,43)" fg:x="685" fg:w="1"/><text x="89.2110%" y="159.50"></text></g><g><title>revm::gas::Gas::reimburse_unspend (1 samples, 0.13%)</title><rect x="89.0909%" y="165" width="0.1299%" height="15" fill="rgb(229,68,48)" fg:x="686" fg:w="1"/><text x="89.3409%" y="175.50"></text></g><g><title>revm::subroutine::SubRoutine::account (1 samples, 0.13%)</title><rect x="89.2208%" y="165" width="0.1299%" height="15" fill="rgb(252,8,32)" fg:x="687" fg:w="1"/><text x="89.4708%" y="175.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (1 samples, 0.13%)</title><rect x="89.4805%" y="133" width="0.1299%" height="15" fill="rgb(223,20,43)" fg:x="689" fg:w="1"/><text x="89.7305%" y="143.50"></text></g><g><title>revm::subroutine::SubRoutine::balance_sub (3 samples, 0.39%)</title><rect x="89.3506%" y="165" width="0.3896%" height="15" fill="rgb(229,81,49)" fg:x="688" fg:w="3"/><text x="89.6006%" y="175.50"></text></g><g><title>revm::subroutine::Filth::make_dirty (2 samples, 0.26%)</title><rect x="89.4805%" y="149" width="0.2597%" height="15" fill="rgb(236,28,36)" fg:x="689" fg:w="2"/><text x="89.7305%" y="159.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (1 samples, 0.13%)</title><rect x="89.6104%" y="133" width="0.1299%" height="15" fill="rgb(249,185,26)" fg:x="690" fg:w="1"/><text x="89.8604%" y="143.50"></text></g><g><title>&lt;revm::db::in_memory_db::BenchmarkDB as revm::db::Database&gt;::basic (3 samples, 0.39%)</title><rect x="89.8701%" y="149" width="0.3896%" height="15" fill="rgb(249,174,33)" fg:x="692" fg:w="3"/><text x="90.1201%" y="159.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::new (3 samples, 0.39%)</title><rect x="89.8701%" y="133" width="0.3896%" height="15" fill="rgb(233,201,37)" fg:x="692" fg:w="3"/><text x="90.1201%" y="143.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.39%)</title><rect x="89.8701%" y="117" width="0.3896%" height="15" fill="rgb(221,78,26)" fg:x="692" fg:w="3"/><text x="90.1201%" y="127.50"></text></g><g><title>_int_malloc (3 samples, 0.39%)</title><rect x="89.8701%" y="101" width="0.3896%" height="15" fill="rgb(250,127,30)" fg:x="692" fg:w="3"/><text x="90.1201%" y="111.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (591 samples, 76.75%)</title><rect x="14.0260%" y="181" width="76.7532%" height="15" fill="rgb(230,49,44)" fg:x="108" fg:w="591"/><text x="14.2760%" y="191.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact</text></g><g><title>revm::subroutine::SubRoutine::load_account (8 samples, 1.04%)</title><rect x="89.7403%" y="165" width="1.0390%" height="15" fill="rgb(229,67,23)" fg:x="691" fg:w="8"/><text x="89.9903%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.52%)</title><rect x="90.2597%" y="149" width="0.5195%" height="15" fill="rgb(249,83,47)" fg:x="695" fg:w="4"/><text x="90.5097%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.39%)</title><rect x="90.3896%" y="133" width="0.3896%" height="15" fill="rgb(215,43,3)" fg:x="696" fg:w="3"/><text x="90.6396%" y="143.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.39%)</title><rect x="90.3896%" y="117" width="0.3896%" height="15" fill="rgb(238,154,13)" fg:x="696" fg:w="3"/><text x="90.6396%" y="127.50"></text></g><g><title>_int_malloc (3 samples, 0.39%)</title><rect x="90.3896%" y="101" width="0.3896%" height="15" fill="rgb(219,56,2)" fg:x="696" fg:w="3"/><text x="90.6396%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="90.7792%" y="181" width="0.1299%" height="15" fill="rgb(233,0,4)" fg:x="699" fg:w="1"/><text x="91.0292%" y="191.50"></text></g><g><title>_int_free (1 samples, 0.13%)</title><rect x="90.9091%" y="181" width="0.1299%" height="15" fill="rgb(235,30,7)" fg:x="700" fg:w="1"/><text x="91.1591%" y="191.50"></text></g><g><title>&lt;revm::subroutine::SubRoutine as core::default::Default&gt;::default (1 samples, 0.13%)</title><rect x="91.1688%" y="165" width="0.1299%" height="15" fill="rgb(250,79,13)" fg:x="702" fg:w="1"/><text x="91.4188%" y="175.50"></text></g><g><title>revm::subroutine::SubRoutine::new (1 samples, 0.13%)</title><rect x="91.1688%" y="149" width="0.1299%" height="15" fill="rgb(211,146,34)" fg:x="702" fg:w="1"/><text x="91.4188%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.39%)</title><rect x="91.2987%" y="165" width="0.3896%" height="15" fill="rgb(228,22,38)" fg:x="703" fg:w="3"/><text x="91.5487%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.26%)</title><rect x="91.4286%" y="149" width="0.2597%" height="15" fill="rgb(235,168,5)" fg:x="704" fg:w="2"/><text x="91.6786%" y="159.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.13%)</title><rect x="91.5584%" y="133" width="0.1299%" height="15" fill="rgb(221,155,16)" fg:x="705" fg:w="1"/><text x="91.8084%" y="143.50"></text></g><g><title>_int_realloc (1 samples, 0.13%)</title><rect x="91.5584%" y="117" width="0.1299%" height="15" fill="rgb(215,215,53)" fg:x="705" fg:w="1"/><text x="91.8084%" y="127.50"></text></g><g><title>_int_malloc (1 samples, 0.13%)</title><rect x="91.5584%" y="101" width="0.1299%" height="15" fill="rgb(223,4,10)" fg:x="705" fg:w="1"/><text x="91.8084%" y="111.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (2 samples, 0.26%)</title><rect x="92.5974%" y="133" width="0.2597%" height="15" fill="rgb(234,103,6)" fg:x="713" fg:w="2"/><text x="92.8474%" y="143.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::get_fixed_seeds (1 samples, 0.13%)</title><rect x="92.8571%" y="133" width="0.1299%" height="15" fill="rgb(227,97,0)" fg:x="715" fg:w="1"/><text x="93.1071%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.52%)</title><rect x="92.9870%" y="133" width="0.5195%" height="15" fill="rgb(234,150,53)" fg:x="716" fg:w="4"/><text x="93.2370%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 1.17%)</title><rect x="93.5065%" y="133" width="1.1688%" height="15" fill="rgb(228,201,54)" fg:x="720" fg:w="9"/><text x="93.7565%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.78%)</title><rect x="93.8961%" y="117" width="0.7792%" height="15" fill="rgb(222,22,37)" fg:x="723" fg:w="6"/><text x="94.1461%" y="127.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (3 samples, 0.39%)</title><rect x="94.6753%" y="117" width="0.3896%" height="15" fill="rgb(237,53,32)" fg:x="729" fg:w="3"/><text x="94.9253%" y="127.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.39%)</title><rect x="95.0649%" y="117" width="0.3896%" height="15" fill="rgb(233,25,53)" fg:x="732" fg:w="3"/><text x="95.3149%" y="127.50"></text></g><g><title>_int_malloc (1 samples, 0.13%)</title><rect x="95.3247%" y="101" width="0.1299%" height="15" fill="rgb(210,40,34)" fg:x="734" fg:w="1"/><text x="95.5747%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29 samples, 3.77%)</title><rect x="91.8182%" y="149" width="3.7662%" height="15" fill="rgb(241,220,44)" fg:x="707" fg:w="29"/><text x="92.0682%" y="159.50">&lt;cor..</text></g><g><title>revm::interpreter::bytecode::Bytecode::new (7 samples, 0.91%)</title><rect x="94.6753%" y="133" width="0.9091%" height="15" fill="rgb(235,28,35)" fg:x="729" fg:w="7"/><text x="94.9253%" y="143.50"></text></g><g><title>__rust_alloc (1 samples, 0.13%)</title><rect x="95.4545%" y="117" width="0.1299%" height="15" fill="rgb(210,56,17)" fg:x="735" fg:w="1"/><text x="95.7045%" y="127.50"></text></g><g><title>__GI___libc_free (1 samples, 0.13%)</title><rect x="96.1039%" y="133" width="0.1299%" height="15" fill="rgb(224,130,29)" fg:x="740" fg:w="1"/><text x="96.3539%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="96.2338%" y="133" width="0.1299%" height="15" fill="rgb(235,212,8)" fg:x="741" fg:w="1"/><text x="96.4838%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.91%)</title><rect x="96.3636%" y="133" width="0.9091%" height="15" fill="rgb(223,33,50)" fg:x="742" fg:w="7"/><text x="96.6136%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.39%)</title><rect x="96.8831%" y="117" width="0.3896%" height="15" fill="rgb(219,149,13)" fg:x="746" fg:w="3"/><text x="97.1331%" y="127.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (17 samples, 2.21%)</title><rect x="95.5844%" y="149" width="2.2078%" height="15" fill="rgb(250,156,29)" fg:x="736" fg:w="17"/><text x="95.8344%" y="159.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.52%)</title><rect x="97.2727%" y="133" width="0.5195%" height="15" fill="rgb(216,193,19)" fg:x="749" fg:w="4"/><text x="97.5227%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (4 samples, 0.52%)</title><rect x="97.2727%" y="117" width="0.5195%" height="15" fill="rgb(216,135,14)" fg:x="749" fg:w="4"/><text x="97.5227%" y="127.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.52%)</title><rect x="97.2727%" y="101" width="0.5195%" height="15" fill="rgb(241,47,5)" fg:x="749" fg:w="4"/><text x="97.5227%" y="111.50"></text></g><g><title>_int_malloc (4 samples, 0.52%)</title><rect x="97.2727%" y="85" width="0.5195%" height="15" fill="rgb(233,42,35)" fg:x="749" fg:w="4"/><text x="97.5227%" y="95.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::new (61 samples, 7.92%)</title><rect x="91.0390%" y="181" width="7.9221%" height="15" fill="rgb(231,13,6)" fg:x="701" fg:w="61"/><text x="91.2890%" y="191.50">revm::evm_i..</text></g><g><title>revm::subroutine::SubRoutine::load_precompiles_default (56 samples, 7.27%)</title><rect x="91.6883%" y="165" width="7.2727%" height="15" fill="rgb(207,181,40)" fg:x="706" fg:w="56"/><text x="91.9383%" y="175.50">revm::subr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (9 samples, 1.17%)</title><rect x="97.7922%" y="149" width="1.1688%" height="15" fill="rgb(254,173,49)" fg:x="753" fg:w="9"/><text x="98.0422%" y="159.50"></text></g><g><title>__GI___libc_malloc (8 samples, 1.04%)</title><rect x="97.9221%" y="133" width="1.0390%" height="15" fill="rgb(221,1,38)" fg:x="754" fg:w="8"/><text x="98.1721%" y="143.50"></text></g><g><title>_int_malloc (8 samples, 1.04%)</title><rect x="97.9221%" y="117" width="1.0390%" height="15" fill="rgb(206,124,46)" fg:x="754" fg:w="8"/><text x="98.1721%" y="127.50"></text></g><g><title>malloc_consolidate (5 samples, 0.65%)</title><rect x="98.3117%" y="101" width="0.6494%" height="15" fill="rgb(249,21,11)" fg:x="757" fg:w="5"/><text x="98.5617%" y="111.50"></text></g><g><title>std::panic::catch_unwind (657 samples, 85.32%)</title><rect x="13.8961%" y="309" width="85.3247%" height="15" fill="rgb(222,201,40)" fg:x="107" fg:w="657"/><text x="14.1461%" y="319.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (657 samples, 85.32%)</title><rect x="13.8961%" y="293" width="85.3247%" height="15" fill="rgb(235,61,29)" fg:x="107" fg:w="657"/><text x="14.1461%" y="303.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (657 samples, 85.32%)</title><rect x="13.8961%" y="277" width="85.3247%" height="15" fill="rgb(219,207,3)" fg:x="107" fg:w="657"/><text x="14.1461%" y="287.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (657 samples, 85.32%)</title><rect x="13.8961%" y="261" width="85.3247%" height="15" fill="rgb(222,56,46)" fg:x="107" fg:w="657"/><text x="14.1461%" y="271.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (657 samples, 85.32%)</title><rect x="13.8961%" y="245" width="85.3247%" height="15" fill="rgb(239,76,54)" fg:x="107" fg:w="657"/><text x="14.1461%" y="255.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (657 samples, 85.32%)</title><rect x="13.8961%" y="229" width="85.3247%" height="15" fill="rgb(231,124,27)" fg:x="107" fg:w="657"/><text x="14.1461%" y="239.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>analysis::main (657 samples, 85.32%)</title><rect x="13.8961%" y="213" width="85.3247%" height="15" fill="rgb(249,195,6)" fg:x="107" fg:w="657"/><text x="14.1461%" y="223.50">analysis::main</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (656 samples, 85.19%)</title><rect x="14.0260%" y="197" width="85.1948%" height="15" fill="rgb(237,174,47)" fg:x="108" fg:w="656"/><text x="14.2760%" y="207.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>revm_precompiles::Precompiles::new (2 samples, 0.26%)</title><rect x="98.9610%" y="181" width="0.2597%" height="15" fill="rgb(206,201,31)" fg:x="762" fg:w="2"/><text x="99.2110%" y="191.50"></text></g><g><title>analysis (765 samples, 99.35%)</title><rect x="0.0000%" y="453" width="99.3506%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="765"/><text x="0.2500%" y="463.50">analysis</text></g><g><title>_start (658 samples, 85.45%)</title><rect x="13.8961%" y="437" width="85.4545%" height="15" fill="rgb(248,177,22)" fg:x="107" fg:w="658"/><text x="14.1461%" y="447.50">_start</text></g><g><title>__libc_start_main (658 samples, 85.45%)</title><rect x="13.8961%" y="421" width="85.4545%" height="15" fill="rgb(215,211,37)" fg:x="107" fg:w="658"/><text x="14.1461%" y="431.50">__libc_start_main</text></g><g><title>main (658 samples, 85.45%)</title><rect x="13.8961%" y="405" width="85.4545%" height="15" fill="rgb(241,128,51)" fg:x="107" fg:w="658"/><text x="14.1461%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (658 samples, 85.45%)</title><rect x="13.8961%" y="389" width="85.4545%" height="15" fill="rgb(227,165,31)" fg:x="107" fg:w="658"/><text x="14.1461%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (658 samples, 85.45%)</title><rect x="13.8961%" y="373" width="85.4545%" height="15" fill="rgb(228,167,24)" fg:x="107" fg:w="658"/><text x="14.1461%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (658 samples, 85.45%)</title><rect x="13.8961%" y="357" width="85.4545%" height="15" fill="rgb(228,143,12)" fg:x="107" fg:w="658"/><text x="14.1461%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (658 samples, 85.45%)</title><rect x="13.8961%" y="341" width="85.4545%" height="15" fill="rgb(249,149,8)" fg:x="107" fg:w="658"/><text x="14.1461%" y="351.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (658 samples, 85.45%)</title><rect x="13.8961%" y="325" width="85.4545%" height="15" fill="rgb(243,35,44)" fg:x="107" fg:w="658"/><text x="14.1461%" y="335.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.13%)</title><rect x="99.2208%" y="309" width="0.1299%" height="15" fill="rgb(246,89,9)" fg:x="764" fg:w="1"/><text x="99.4708%" y="319.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.13%)</title><rect x="99.2208%" y="293" width="0.1299%" height="15" fill="rgb(233,213,13)" fg:x="764" fg:w="1"/><text x="99.4708%" y="303.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.13%)</title><rect x="99.2208%" y="277" width="0.1299%" height="15" fill="rgb(233,141,41)" fg:x="764" fg:w="1"/><text x="99.4708%" y="287.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.13%)</title><rect x="99.2208%" y="261" width="0.1299%" height="15" fill="rgb(239,167,4)" fg:x="764" fg:w="1"/><text x="99.4708%" y="271.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.13%)</title><rect x="99.2208%" y="245" width="0.1299%" height="15" fill="rgb(209,217,16)" fg:x="764" fg:w="1"/><text x="99.4708%" y="255.50"></text></g><g><title>__GI___isoc99_sscanf (1 samples, 0.13%)</title><rect x="99.2208%" y="229" width="0.1299%" height="15" fill="rgb(219,88,35)" fg:x="764" fg:w="1"/><text x="99.4708%" y="239.50"></text></g><g><title>__vfscanf_internal (1 samples, 0.13%)</title><rect x="99.2208%" y="213" width="0.1299%" height="15" fill="rgb(220,193,23)" fg:x="764" fg:w="1"/><text x="99.4708%" y="223.50"></text></g><g><title>__GI_____strtoull_l_internal (1 samples, 0.13%)</title><rect x="99.2208%" y="197" width="0.1299%" height="15" fill="rgb(230,90,52)" fg:x="764" fg:w="1"/><text x="99.4708%" y="207.50"></text></g><g><title>all (770 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="770"/><text x="0.2500%" y="479.50"></text></g><g><title>perf-exec (5 samples, 0.65%)</title><rect x="99.3506%" y="453" width="0.6494%" height="15" fill="rgb(206,74,20)" fg:x="765" fg:w="5"/><text x="99.6006%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="437" width="0.6494%" height="15" fill="rgb(230,138,44)" fg:x="765" fg:w="5"/><text x="99.6006%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="421" width="0.6494%" height="15" fill="rgb(235,182,43)" fg:x="765" fg:w="5"/><text x="99.6006%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="405" width="0.6494%" height="15" fill="rgb(242,16,51)" fg:x="765" fg:w="5"/><text x="99.6006%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="389" width="0.6494%" height="15" fill="rgb(248,9,4)" fg:x="765" fg:w="5"/><text x="99.6006%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="373" width="0.6494%" height="15" fill="rgb(210,31,22)" fg:x="765" fg:w="5"/><text x="99.6006%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="357" width="0.6494%" height="15" fill="rgb(239,54,39)" fg:x="765" fg:w="5"/><text x="99.6006%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="341" width="0.6494%" height="15" fill="rgb(230,99,41)" fg:x="765" fg:w="5"/><text x="99.6006%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="325" width="0.6494%" height="15" fill="rgb(253,106,12)" fg:x="765" fg:w="5"/><text x="99.6006%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="309" width="0.6494%" height="15" fill="rgb(213,46,41)" fg:x="765" fg:w="5"/><text x="99.6006%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="293" width="0.6494%" height="15" fill="rgb(215,133,35)" fg:x="765" fg:w="5"/><text x="99.6006%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="277" width="0.6494%" height="15" fill="rgb(213,28,5)" fg:x="765" fg:w="5"/><text x="99.6006%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="261" width="0.6494%" height="15" fill="rgb(215,77,49)" fg:x="765" fg:w="5"/><text x="99.6006%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="245" width="0.6494%" height="15" fill="rgb(248,100,22)" fg:x="765" fg:w="5"/><text x="99.6006%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.65%)</title><rect x="99.3506%" y="229" width="0.6494%" height="15" fill="rgb(208,67,9)" fg:x="765" fg:w="5"/><text x="99.6006%" y="239.50"></text></g></svg></svg>